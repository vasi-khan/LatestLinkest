using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using System.Security.Authentication;
using System.Security.Cryptography.X509Certificates;
using Inetlab.SMPP;
using Inetlab.SMPP.Builders;
using Inetlab.SMPP.Common;
using Inetlab.SMPP.Logging;
using Inetlab.SMPP.PDU;
using System.Timers;
using System.Configuration;

namespace SMPP_APP
{
    public partial class Form1 : Form
    {
        int no_of_sms = Convert.ToInt32(ConfigurationManager.AppSettings["NO_OF_SMS"]);
        int EXE_NUMBER = Convert.ToInt32(ConfigurationManager.AppSettings["EXE_NUMBER"]);
        public string dlrCallBack = Convert.ToString(ConfigurationManager.AppSettings["DLR_CALLBACK_APPLICABLE"]);
        public static DataTable dtDltEr;

        //private readonly SmppClient[] _client;
        private SmppClient[] _client;
        private System.Timers.Timer[] timerPROCESS;
        private System.Timers.Timer timerEXCEP;
        private System.Timers.Timer timerEXEnotification;
        private System.Timers.Timer timerAutoBindingUnBindSession;   //Add By Vikas on 10-08-2023

        private MessageComposer[] _messageComposer;

        internal BackgroundWorker[] worker;

        internal BackgroundWorker workerSMSSend;

        internal bool[] m_IsConnected;
        internal bool[] m_ConnectedSucceed;
        internal bool[] m_ConnectionInProcess;
        DataTable dt;
        Util _log = new Util();
        Util obU = new Util();
        public bool boolIsEXEnotificationProcess = false;
        public bool boolIsExceptionProcess = false;
        public bool boolIsAutoBindingUnBindSessionProcess = false;   //Add By Vikas on 10-08-2023

        public Form1()
        {
            InitializeComponent();
            this.Text = Convert.ToString(ConfigurationManager.AppSettings["FORMCAPTION"]);
        }

        private void Form1_Load(object sender, EventArgs e)
        {

            _log.Info("Service started.");

            timerEXEnotification = new System.Timers.Timer();
            timerEXEnotification.Interval = Convert.ToDouble(ConfigurationManager.AppSettings["PROCESS_INTERVAL_EXENOTIFY"]);
            this.timerEXEnotification.Elapsed += new System.Timers.ElapsedEventHandler(this.timerEXEnotification_Tick);
            timerEXEnotification.Enabled = true;
            this.timerEXEnotification.Start();

            // C#
            #region <Licence >
            string licenseContent = @"
-----BEGIN INETLAB LICENSE------
O4TP3GKNGFSNQCAMNIBCIVDFMNUG433I
NF3GKICTN5WHK5DJN5XHGICQOJUXMYLU
MUQEY2LNNF2GKZADDV2GK23ON5UGS5TF
FZZW63DVORUW63TTIBTW2YLJNQXGG33N
AQIXG2DBOJSWS5BNGY4DANJSGMZDSMYF
QDQDZI7NMPMAQBUAUABRZP4C3EEIAALP
Y6C7AKTR64LUPXOB5LYEJ55W5SCUZJHP
YRDJGALKWBY5IZHZKGGPM5V23FXWXKJ4
KHE4QNIKJGZU76DSPS6KM6TKB56B3R4E
BKXEC6OB3WZDKQUT2TAEQA75VD2EDAZB
D4BVOXGUFK2JUVVCAXV2FGLNO5XYM25Z
EAXSNVCRTU7Z6HQLK4KS5JIX2QWH3MZI
25PHPAIB7MCQ====
-----END INETLAB LICENSE--------";
            #endregion

            #region < Licence 2.9.9 >
            licenseContent = @"-----BEGIN INETLAB LICENSE------
O5VYVIFW3YUNSCAMPAFAYSLOMV2GYYLC
FZJU2UCQAISFIZLDNBXG62DJOZSSAU3P
NR2XI2LPNZZSAUDSNF3GC5DFEBGGS3LJ
ORSWIAY5ORSWW3TPNBUXMZJOONXWY5LU
NFXW442AM5WWC2LMFZRW63IECFZWQYLS
MVUXILJWHAYDKMRTGI4TGBMA4A6KH3LD
3AEANAFAAMOL7AWZBCAACRRPS3OPJDRU
NBGQBR64NSQ5HTVM3O6NYMPAKDHJQZ6J
UPDOQ2WAQAG7LLASKNSFTAMZ4OLOFBXE
JDRT7YOGQYGTAZFJRWZZ3MUTLR67XPFK
OT3HBKF6NSCNAZ4JQUUGBVRDCOXGKRTS
BKLQ2HFP24WCNNNLGMK6JHFAK4NYRDBO
XU67JUWNEAD3HDEDUZOO7LZUJPH3GPLO
SE======
-----END INETLAB LICENSE--------";
            #endregion
            Inetlab.SMPP.LicenseManager.SetLicense(licenseContent);
            //Inetlab.SMPP.LicenseManager.SetLicense(this.GetType().Assembly.GetManifestResourceStream(this.GetType(), "Inetlab.SMPP.license" ));

            clsCheck.tmid = System.Text.Encoding.UTF8.GetBytes(clsCheck.stmid);
            clsCheck.tmid_T = System.Text.Encoding.UTF8.GetBytes(clsCheck.stmidT);
            Initialize_Client();

            //ProcessSMSsending();
            timerEXCEP = new System.Timers.Timer();
            timerEXCEP.Interval = Convert.ToDouble(ConfigurationManager.AppSettings["PROCESS_INTERVAL_EXCEP"]);
            this.timerEXCEP.Elapsed += new System.Timers.ElapsedEventHandler(this.timerEXCEP_Tick);
            timerEXCEP.Enabled = true;
            this.timerEXCEP.Start();

            //Add By Vikas On 10-08-2023 ProcessCheckBindAndUnbindSession();
            if (Convert.ToDouble(ConfigurationManager.AppSettings["PROCESS_INTERVAL_AUTOBINDING"]) != 0)
            {
                timerAutoBindingUnBindSession = new System.Timers.Timer();
                timerAutoBindingUnBindSession.Interval = Convert.ToDouble(ConfigurationManager.AppSettings["PROCESS_INTERVAL_AUTOBINDING"]);
                this.timerAutoBindingUnBindSession.Elapsed += new System.Timers.ElapsedEventHandler(this.timerAutoBindingUnBindSession_Tick);
                timerAutoBindingUnBindSession.Enabled = true;
                this.timerAutoBindingUnBindSession.Start();
            }
        }

        #region << EXE NOTIFICATION >>
        private void timerEXEnotification_Tick(object sender, ElapsedEventArgs e)
        {
            try
            {
                if (boolIsEXEnotificationProcess) return;
                boolIsEXEnotificationProcess = true;
                ProcessEXEnotification();
                boolIsEXEnotificationProcess = false;
            }
            catch (Exception ex)
            {
                boolIsEXEnotificationProcess = false;
                _log.Info_Err2("ProcessEXENotification_" + ex.StackTrace + " - " + ex.Message, 9999);
            }
        }
        public void ProcessEXEnotification()
        {
            string SMPPClientRunningFldName = "SMPPClientRunning" + (EXE_NUMBER == 1 ? "" : EXE_NUMBER.ToString());
            string SMPPClientRunningDateTimeFldName = "SMPPClientRunningDateTime" + (EXE_NUMBER == 1 ? "" : EXE_NUMBER.ToString());
            database.ExecuteNonQuery("Update ExeNotification set " + SMPPClientRunningFldName + "=1,"+ SMPPClientRunningDateTimeFldName + "=getdate() ");
        }
        #endregion

        #region << EXCEPTION >>
        private void timerEXCEP_Tick(object sender, ElapsedEventArgs e)
        {
            try
            {
                if (boolIsExceptionProcess) return;
                boolIsExceptionProcess = true;
                ProcessEXCEP();
                boolIsExceptionProcess = false;
            }
            catch (Exception ex)
            {
                boolIsExceptionProcess = false;
                _log.Info_Err2("ProcessEXCEP_" + ex.StackTrace + " - " + ex.Message, 9999);
            }
        }

        public void ProcessEXCEP()
        {
            string sql = "";
            try
            {
                //sql = "select distinct TranTableName from smppsetting with (nolock) where active=1 and (BINDINGMODE = 'Transceiver' or BINDINGMODE='Transmiter') and TranTableName is not null";

                //=========================Add by Vikas On 10-08-2023 Select ExeNumber Base Data table===================================
                sql = "SELECT DISTINCT TranTableName FROM SMPPSETTING WITH(NOLOCK) WHERE ACTIVE=1 AND (BINDINGMODE = 'Transceiver' OR BINDINGMODE='Transmiter') AND EXEnumber='" + EXE_NUMBER + "' AND TranTableName IS NOT NULL";
                DataTable dtT = database.GetDataTable(sql);
                if (dtT.Rows.Count > 0)
                {
                    for (int m = 0; m < dtT.Rows.Count; m++)
                    {
                        string TrnTblNm = dtT.Rows[m]["TRANTABLENAME"].ToString();
                        sql = "Select count(*) from " + TrnTblNm + " with (nolock) where picked_datetime <= dateadd(MINUTE,-10,GETDATE())";
                        Int64 cn = Convert.ToInt64(database.GetScalarValue(sql));
                        if (cn > 0)
                        {
                            sql = "Select DISTINCT SMPPACCOUNTID from " + TrnTblNm + "  with (nolock) where picked_datetime <= dateadd(MINUTE,-10,GETDATE())";
                            DataTable dtTran = database.GetDataTable(sql);
                            if (dtTran.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtTran.Rows.Count; i++)
                                {
                                    sql = "SELECT COUNT(*) FROM MSGSUBMITTED with (nolock) WHERE SENTDATETIME >= dateadd(MINUTE,-3,GETDATE()) AND SMPPACCOUNTID='" + dtTran.Rows[i]["SMPPACCOUNTID"].ToString() + "' AND NSEND=0";
                                    cn = Convert.ToInt64(database.GetScalarValue(sql));
                                    if (cn <= 0)
                                    {
                                        /*
                                        sql = "DELETE FROM " + TrnTblNm + " WHERE CONVERT(VARCHAR, SMPPACCOUNTID) + CONVERT(VARCHAR, TOMOBILE) + CONVERT(VARCHAR, FILEID) IN" +
                                            " (SELECT CONVERT(VARCHAR, SMPPACCOUNTID) + CONVERT(VARCHAR, TOMOBILE) + CONVERT(VARCHAR, FILEID) FROM MSGSUBMITTED with (nolock)" +
                                            " where convert(varchar,SENTDATETIME,102)=convert(varchar,getdate(),102) and smppaccountid='" + dtTran.Rows[i]["SMPPACCOUNTID"].ToString() + "') ; " +
                                            " Update " + TrnTblNm + " set picked_datetime = null WHERE smppaccountid='" + dtTran.Rows[i]["SMPPACCOUNTID"].ToString() + "' AND picked_datetime IS NOT NULL ; "; */
                                        sql = " Update " + TrnTblNm + " set picked_datetime = null WHERE smppaccountid='" + dtTran.Rows[i]["SMPPACCOUNTID"].ToString() + "' AND picked_datetime IS NOT NULL ; ";
                                        database.ExecuteNonQuery(sql);
                                        DataRow[] drT = dt.Select("SMPPACCOUNTID='" + dtTran.Rows[i]["SMPPACCOUNTID"].ToString() + "'");
                                        int z = Convert.ToInt16(drT[0]["rownum"]) - 1;
                                        clsCheck.inprocess[z] = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                boolIsExceptionProcess = false;
                _log.Info_Excepn("ProcessEXCEP_" + ex.StackTrace + " - " + ex.Message, 9999);
                throw ex;
            }
        }
        #endregion

        public void ProcessSMSsending(int i)
        {
            try
            {
                int acId = Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]);
                string tranTableName = Convert.ToString(dt.Rows[i]["TRANTABLENAME"]);
                //if (acId != 1605) return;
                //obU.InfoTest("frm processing for " + i.ToString() + " and account id = " + acId.ToString());

                //Testing
                string sTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");

                clsCheck.inprocess[i] = true;

                //Fetch SMS Sending Data from Database
                DataTable dtSMS = obU.GetSMSRecords(acId, no_of_sms, sTime, tranTableName);
                //DataTable dtSMS = obU.GetSMSRecordsTEST(acId, no_of_sms);
                //obU.InfoTest("frm processing for " + i.ToString() + " and account id = " + acId.ToString() + " sms record = " + dtSMS.Rows.Count.ToString());
                if (dtSMS.Rows.Count > 0)
                {
                    clsCheck.inprocess[i] = true;
                    //obU.InfoTest("frm processing for " + i.ToString() + " and account id = " + acId.ToString() + " sendMessage Started");

                    //This method calls SMSSending Method 
                    SendMessage(dtSMS, i);
                    //obU.InfoTest("frm processing for " + i.ToString() + " and account id = " + acId.ToString() + " sendMessage ended");
                }
                else
                {
                    //obU.InfoTest("frm processing for " + i.ToString() + " and account id = " + acId.ToString() + " setting inprocess val false");
                    clsCheck.inprocess[i] = false;
                }
                //threading needs to be used here for sending to different smpp account.
                //workerSMSSend = new BackgroundWorker();
                //workerSMSSend.DoWork += new DoWorkEventHandler(workerSMSSend_DoWork);
                //workerSMSSend.ProgressChanged += new ProgressChangedEventHandler(workerSMSSend_ProgressChanged);
                //workerSMSSend.RunWorkerCompleted += new RunWorkerCompletedEventHandler(workerSMSSend_RunWorkerCompleted);
                //dtSMS.TableName = i.ToString();
                //object obj = dtSMS;
                //workerSMSSend.RunWorkerAsync(obj);

                //if (dtSMS.Rows.Count > 0)
                //{
                //    System.Threading.Thread t = new System.Threading.Thread(() =>
                //    {
                //        SendMessage(dtSMS, i);
                //    });
                //    t.Start();
                //}

            }
            catch (Exception ex)
            {
                int acId1 = Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]);
                _log.Info_Err2("Main 1 Catch of Sending - " + ex.Message + " " + ex.StackTrace, acId1);
                if (ex.Message.Contains("deadlock victim"))
                {
                    int rnd1 = (new Random()).Next(10000, 32000);

                    try
                    {
                        System.Threading.Thread.Sleep(rnd1);
                        obU.RemoveFromMsgTran(dt.Rows[i]["SMPPACCOUNTID"].ToString(), dt.Rows[i]["TRANTABLENAME"].ToString());
                        clsCheck.inprocess[i] = false;
                        _log.Info_Err2("Main 1 Catch of Sending unlocked - ", acId1);
                    }
                    catch (Exception ex2)
                    {
                        try
                        {
                            System.Threading.Thread.Sleep(rnd1);
                            _log.Info_Err2("Main 1 Catch 2 of Sending - " + ex2.Message + " " + ex2.StackTrace, acId1);
                            obU.RemoveFromMsgTran(dt.Rows[i]["SMPPACCOUNTID"].ToString(), dt.Rows[i]["TRANTABLENAME"].ToString());
                            clsCheck.inprocess[i] = false;
                            _log.Info_Err2("Main 1 Catch of Sending unlocked 2 - ", acId1);
                        }
                        catch (Exception ex3)
                        { }
                    }
                }
                //throw ex;
                //    _log.InfoEr2("ProcessSMSsending_" + ex.Message + " - " + ex.StackTrace);
                //    _log.InfoTest(" erro on ProcessSMSsending for " + i.ToString() + " -" + ex.Message + " - " + ex.StackTrace);
                //    _log.InfoTest(" erro on ProcessSMSsending for " + i.ToString() + " set inprocess false");
                //    clsCheck.inProcess = false;
            }
        }

        public async Task SendMessage(DataTable dtSMS, int i)
        {
            try
            {
                int acId1 = Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]);
                //obU.InfoTest("frm SendMessage for " + i.ToString() + " dtSMS = " + dtSMS.Rows.Count.ToString());

                if (_client[i].Status != ConnectionStatus.Bound)
                {
                    _log.Info("frm SendMessage for " + acId1.ToString() + " client status not bound");
                    string[] arg = GetArg(i);
                    _log.Info("frm SendMessage for " + acId1.ToString() + " client connect start");
                    await Connect(arg);
                    _log.Info("frm SendMessage for " + acId1.ToString() + " client connect ended");
                }

                if (_client[i].Status == ConnectionStatus.Bound)
                {
                    //obU.InfoTest("frm SendMessage for " + i.ToString() + " MsgSend start");
                    #region <commented for testing >

                    int k = Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]);
                    switch (k)
                    {
                        case 101:
                            await SendMessageBatchAsFastAsPossible101(dtSMS, i); break;
                        case 102:
                            await SendMessageBatchAsFastAsPossible102(dtSMS, i); break;
                        case 103:
                            await SendMessageBatchAsFastAsPossible103(dtSMS, i); break;
                        case 104:
                            await SendMessageBatchAsFastAsPossible104(dtSMS, i); break;
                        case 105:
                            await SendMessageBatchAsFastAsPossible105(dtSMS, i); break;
                        case 106:
                            await SendMessageBatchAsFastAsPossible106(dtSMS, i); break;
                        case 107:
                            await SendMessageBatchAsFastAsPossible107(dtSMS, i); break;
                        case 108:
                            await SendMessageBatchAsFastAsPossible108(dtSMS, i); break;
                        case 109:
                            await SendMessageBatchAsFastAsPossible109(dtSMS, i); break;
                        case 110:
                            await SendMessageBatchAsFastAsPossible110(dtSMS, i); break;

                        case 201:
                            await SendMessageBatchAsFastAsPossible201(dtSMS, i); break;
                        case 202:
                            await SendMessageBatchAsFastAsPossible202(dtSMS, i); break;
                        case 203:
                            await SendMessageBatchAsFastAsPossible203(dtSMS, i); break;
                        case 204:
                            await SendMessageBatchAsFastAsPossible204(dtSMS, i); break;
                        case 205:
                            await SendMessageBatchAsFastAsPossible205(dtSMS, i); break;
                        case 206:
                            await SendMessageBatchAsFastAsPossible206(dtSMS, i); break;
                        case 207:
                            await SendMessageBatchAsFastAsPossible207(dtSMS, i); break;
                        case 208:
                            await SendMessageBatchAsFastAsPossible208(dtSMS, i); break;
                        case 209:
                            await SendMessageBatchAsFastAsPossible209(dtSMS, i); break;
                        case 210:
                            await SendMessageBatchAsFastAsPossible210(dtSMS, i); break;

                        case 301:
                            await SendMessageBatchAsFastAsPossible301(dtSMS, i); break;
                        case 302:
                            await SendMessageBatchAsFastAsPossible302(dtSMS, i); break;
                        case 303:
                            await SendMessageBatchAsFastAsPossible303(dtSMS, i); break;
                        case 304:
                            await SendMessageBatchAsFastAsPossible304(dtSMS, i); break;
                        case 305:
                            await SendMessageBatchAsFastAsPossible305(dtSMS, i); break;
                        case 306:
                            await SendMessageBatchAsFastAsPossible306(dtSMS, i); break;
                        case 307:
                            await SendMessageBatchAsFastAsPossible307(dtSMS, i); break;
                        case 308:
                            await SendMessageBatchAsFastAsPossible308(dtSMS, i); break;
                        case 309:
                            await SendMessageBatchAsFastAsPossible309(dtSMS, i); break;
                        case 310:
                            await SendMessageBatchAsFastAsPossible310(dtSMS, i); break;

                        case 401:
                            await SendMessageBatchAsFastAsPossible401(dtSMS, i); break;
                        case 402:
                            await SendMessageBatchAsFastAsPossible402(dtSMS, i); break;
                        case 403:
                            await SendMessageBatchAsFastAsPossible403(dtSMS, i); break;
                        case 404:
                            await SendMessageBatchAsFastAsPossible404(dtSMS, i); break;
                        case 405:
                            await SendMessageBatchAsFastAsPossible405(dtSMS, i); break;
                        case 406:
                            await SendMessageBatchAsFastAsPossible406(dtSMS, i); break;
                        case 407:
                            await SendMessageBatchAsFastAsPossible407(dtSMS, i); break;
                        case 408:
                            await SendMessageBatchAsFastAsPossible408(dtSMS, i); break;
                        case 409:
                            await SendMessageBatchAsFastAsPossible409(dtSMS, i); break;
                        case 410:
                            await SendMessageBatchAsFastAsPossible410(dtSMS, i); break;

                        case 501:
                            await SendMessageBatchAsFastAsPossible501(dtSMS, i); break;
                        case 502:
                            await SendMessageBatchAsFastAsPossible502(dtSMS, i); break;
                        case 503:
                            await SendMessageBatchAsFastAsPossible503(dtSMS, i); break;
                        case 504:
                            await SendMessageBatchAsFastAsPossible504(dtSMS, i); break;
                        case 505:
                            await SendMessageBatchAsFastAsPossible505(dtSMS, i); break;
                        case 506:
                            await SendMessageBatchAsFastAsPossible506(dtSMS, i); break;
                        case 507:
                            await SendMessageBatchAsFastAsPossible507(dtSMS, i); break;
                        case 508:
                            await SendMessageBatchAsFastAsPossible508(dtSMS, i); break;
                        case 509:
                            await SendMessageBatchAsFastAsPossible509(dtSMS, i); break;
                        case 510:
                            await SendMessageBatchAsFastAsPossible510(dtSMS, i); break;

                        case 601:
                            await SendMessageBatchAsFastAsPossible601(dtSMS, i); break;
                        case 602:
                            await SendMessageBatchAsFastAsPossible602(dtSMS, i); break;
                        case 603:
                            await SendMessageBatchAsFastAsPossible603(dtSMS, i); break;
                        case 604:
                            await SendMessageBatchAsFastAsPossible604(dtSMS, i); break;
                        case 605:
                            await SendMessageBatchAsFastAsPossible605(dtSMS, i); break;
                        case 606:
                            await SendMessageBatchAsFastAsPossible606(dtSMS, i); break;
                        case 607:
                            await SendMessageBatchAsFastAsPossible607(dtSMS, i); break;
                        case 608:
                            await SendMessageBatchAsFastAsPossible608(dtSMS, i); break;
                        case 609:
                            await SendMessageBatchAsFastAsPossible609(dtSMS, i); break;
                        case 610:
                            await SendMessageBatchAsFastAsPossible610(dtSMS, i); break;

                        case 701:
                            await SendMessageBatchAsFastAsPossible701(dtSMS, i); break;
                        case 702:
                            await SendMessageBatchAsFastAsPossible702(dtSMS, i); break;
                        case 703:
                            await SendMessageBatchAsFastAsPossible703(dtSMS, i); break;
                        case 704:
                            await SendMessageBatchAsFastAsPossible704(dtSMS, i); break;
                        case 705:
                            await SendMessageBatchAsFastAsPossible705(dtSMS, i); break;
                        case 706:
                            await SendMessageBatchAsFastAsPossible706(dtSMS, i); break;
                        case 707:
                            await SendMessageBatchAsFastAsPossible707(dtSMS, i); break;
                        case 708:
                            await SendMessageBatchAsFastAsPossible708(dtSMS, i); break;
                        case 709:
                            await SendMessageBatchAsFastAsPossible709(dtSMS, i); break;
                        case 710:
                            await SendMessageBatchAsFastAsPossible710(dtSMS, i); break;

                        case 801:
                            await SendMessageBatchAsFastAsPossible801(dtSMS, i); break;
                        case 802:
                            await SendMessageBatchAsFastAsPossible802(dtSMS, i); break;
                        case 803:
                            await SendMessageBatchAsFastAsPossible803(dtSMS, i); break;
                        case 804:
                            await SendMessageBatchAsFastAsPossible804(dtSMS, i); break;
                        case 805:
                            await SendMessageBatchAsFastAsPossible805(dtSMS, i); break;
                        case 806:
                            await SendMessageBatchAsFastAsPossible806(dtSMS, i); break;
                        case 807:
                            await SendMessageBatchAsFastAsPossible807(dtSMS, i); break;
                        case 808:
                            await SendMessageBatchAsFastAsPossible808(dtSMS, i); break;
                        case 809:
                            await SendMessageBatchAsFastAsPossible809(dtSMS, i); break;
                        case 810:
                            await SendMessageBatchAsFastAsPossible810(dtSMS, i); break;

                        case 901:
                            await SendMessageBatchAsFastAsPossible901(dtSMS, i); break;
                        case 902:
                            await SendMessageBatchAsFastAsPossible902(dtSMS, i); break;
                        case 903:
                            await SendMessageBatchAsFastAsPossible903(dtSMS, i); break;
                        case 904:
                            await SendMessageBatchAsFastAsPossible904(dtSMS, i); break;
                        case 905:
                            await SendMessageBatchAsFastAsPossible905(dtSMS, i); break;
                        case 906:
                            await SendMessageBatchAsFastAsPossible906(dtSMS, i); break;
                        case 907:
                            await SendMessageBatchAsFastAsPossible907(dtSMS, i); break;
                        case 908:
                            await SendMessageBatchAsFastAsPossible908(dtSMS, i); break;
                        case 909:
                            await SendMessageBatchAsFastAsPossible909(dtSMS, i); break;
                        case 910:
                            await SendMessageBatchAsFastAsPossible910(dtSMS, i); break;

                        case 1001:
                            await SendMessageBatchAsFastAsPossible1001(dtSMS, i); break;
                        case 1002:
                            await SendMessageBatchAsFastAsPossible1002(dtSMS, i); break;
                        case 1003:
                            await SendMessageBatchAsFastAsPossible1003(dtSMS, i); break;
                        case 1004:
                            await SendMessageBatchAsFastAsPossible1004(dtSMS, i); break;
                        case 1005:
                            await SendMessageBatchAsFastAsPossible1005(dtSMS, i); break;
                        case 1006:
                            await SendMessageBatchAsFastAsPossible1006(dtSMS, i); break;
                        case 1007:
                            await SendMessageBatchAsFastAsPossible1007(dtSMS, i); break;
                        case 1008:
                            await SendMessageBatchAsFastAsPossible1008(dtSMS, i); break;
                        case 1009:
                            await SendMessageBatchAsFastAsPossible1009(dtSMS, i); break;
                        case 1010:
                            await SendMessageBatchAsFastAsPossible1010(dtSMS, i); break;

                        case 1101:
                            await SendMessageBatchAsFastAsPossible1101(dtSMS, i); break;
                        case 1102:
                            await SendMessageBatchAsFastAsPossible1102(dtSMS, i); break;
                        case 1103:
                            await SendMessageBatchAsFastAsPossible1103(dtSMS, i); break;
                        case 1104:
                            await SendMessageBatchAsFastAsPossible1104(dtSMS, i); break;
                        case 1105:
                            await SendMessageBatchAsFastAsPossible1105(dtSMS, i); break;
                        case 1106:
                            await SendMessageBatchAsFastAsPossible1106(dtSMS, i); break;
                        case 1107:
                            await SendMessageBatchAsFastAsPossible1107(dtSMS, i); break;
                        case 1108:
                            await SendMessageBatchAsFastAsPossible1108(dtSMS, i); break;
                        case 1109:
                            await SendMessageBatchAsFastAsPossible1109(dtSMS, i); break;
                        case 1110:
                            await SendMessageBatchAsFastAsPossible1110(dtSMS, i); break;

                        case 1201:
                            await SendMessageBatchAsFastAsPossible1201(dtSMS, i); break;
                        case 1202:
                            await SendMessageBatchAsFastAsPossible1202(dtSMS, i); break;
                        case 1203:
                            await SendMessageBatchAsFastAsPossible1203(dtSMS, i); break;
                        case 1204:
                            await SendMessageBatchAsFastAsPossible1204(dtSMS, i); break;
                        case 1205:
                            await SendMessageBatchAsFastAsPossible1205(dtSMS, i); break;
                        case 1206:
                            await SendMessageBatchAsFastAsPossible1206(dtSMS, i); break;
                        case 1207:
                            await SendMessageBatchAsFastAsPossible1207(dtSMS, i); break;
                        case 1208:
                            await SendMessageBatchAsFastAsPossible1208(dtSMS, i); break;
                        case 1209:
                            await SendMessageBatchAsFastAsPossible1209(dtSMS, i); break;
                        case 1210:
                            await SendMessageBatchAsFastAsPossible1210(dtSMS, i); break;

                        case 1301:
                            await SendMessageBatchAsFastAsPossible1301(dtSMS, i); break;
                        case 1302:
                            await SendMessageBatchAsFastAsPossible1302(dtSMS, i); break;
                        case 1303:
                            await SendMessageBatchAsFastAsPossible1303(dtSMS, i); break;
                        case 1304:
                            await SendMessageBatchAsFastAsPossible1304(dtSMS, i); break;
                        case 1305:
                            await SendMessageBatchAsFastAsPossible1305(dtSMS, i); break;
                        case 1306:
                            await SendMessageBatchAsFastAsPossible1306(dtSMS, i); break;
                        case 1307:
                            await SendMessageBatchAsFastAsPossible1307(dtSMS, i); break;
                        case 1308:
                            await SendMessageBatchAsFastAsPossible1308(dtSMS, i); break;
                        case 1309:
                            await SendMessageBatchAsFastAsPossible1309(dtSMS, i); break;
                        case 1310:
                            await SendMessageBatchAsFastAsPossible1310(dtSMS, i); break;

                        case 1401:
                            await SendMessageBatchAsFastAsPossible1401(dtSMS, i); break;
                        case 1402:
                            await SendMessageBatchAsFastAsPossible1402(dtSMS, i); break;
                        case 1403:
                            await SendMessageBatchAsFastAsPossible1403(dtSMS, i); break;
                        case 1404:
                            await SendMessageBatchAsFastAsPossible1404(dtSMS, i); break;
                        case 1405:
                            await SendMessageBatchAsFastAsPossible1405(dtSMS, i); break;
                        case 1406:
                            await SendMessageBatchAsFastAsPossible1406(dtSMS, i); break;
                        case 1407:
                            await SendMessageBatchAsFastAsPossible1407(dtSMS, i); break;
                        case 1408:
                            await SendMessageBatchAsFastAsPossible1408(dtSMS, i); break;
                        case 1409:
                            await SendMessageBatchAsFastAsPossible1409(dtSMS, i); break;
                        case 1410:
                            await SendMessageBatchAsFastAsPossible1410(dtSMS, i); break;

                        case 1501:
                            await SendMessageBatchAsFastAsPossible1501(dtSMS, i); break;
                        case 1502:
                            await SendMessageBatchAsFastAsPossible1502(dtSMS, i); break;
                        case 1503:
                            await SendMessageBatchAsFastAsPossible1503(dtSMS, i); break;
                        case 1504:
                            await SendMessageBatchAsFastAsPossible1504(dtSMS, i); break;
                        case 1505:
                            await SendMessageBatchAsFastAsPossible1505(dtSMS, i); break;
                        case 1506:
                            await SendMessageBatchAsFastAsPossible1506(dtSMS, i); break;
                        case 1507:
                            await SendMessageBatchAsFastAsPossible1507(dtSMS, i); break;
                        case 1508:
                            await SendMessageBatchAsFastAsPossible1508(dtSMS, i); break;
                        case 1509:
                            await SendMessageBatchAsFastAsPossible1509(dtSMS, i); break;
                        case 1510:
                            await SendMessageBatchAsFastAsPossible1510(dtSMS, i); break;

                        case 1601:
                            await SendMessageBatchAsFastAsPossible1601(dtSMS, i); break;
                        case 1602:
                            await SendMessageBatchAsFastAsPossible1602(dtSMS, i); break;
                        case 1603:
                            await SendMessageBatchAsFastAsPossible1603(dtSMS, i); break;
                        case 1604:
                            await SendMessageBatchAsFastAsPossible1604(dtSMS, i); break;
                        case 1605:
                            await SendMessageBatchAsFastAsPossible1605(dtSMS, i); break;
                        case 1606:
                            await SendMessageBatchAsFastAsPossible1606(dtSMS, i); break;
                        case 1607:
                            await SendMessageBatchAsFastAsPossible1607(dtSMS, i); break;
                        case 1608:
                            await SendMessageBatchAsFastAsPossible1608(dtSMS, i); break;
                        case 1609:
                            await SendMessageBatchAsFastAsPossible1609(dtSMS, i); break;
                        case 1610:
                            await SendMessageBatchAsFastAsPossible1610(dtSMS, i); break;

                        case 1701:
                            await SendMessageBatchAsFastAsPossible1701(dtSMS, i); break;
                        case 1702:
                            await SendMessageBatchAsFastAsPossible1702(dtSMS, i); break;
                        case 1703:
                            await SendMessageBatchAsFastAsPossible1703(dtSMS, i); break;
                        case 1704:
                            await SendMessageBatchAsFastAsPossible1704(dtSMS, i); break;
                        case 1705:
                            await SendMessageBatchAsFastAsPossible1705(dtSMS, i); break;
                        case 1706:
                            await SendMessageBatchAsFastAsPossible1706(dtSMS, i); break;
                        case 1707:
                            await SendMessageBatchAsFastAsPossible1707(dtSMS, i); break;
                        case 1708:
                            await SendMessageBatchAsFastAsPossible1708(dtSMS, i); break;
                        case 1709:
                            await SendMessageBatchAsFastAsPossible1709(dtSMS, i); break;
                        case 1710:
                            await SendMessageBatchAsFastAsPossible1710(dtSMS, i); break;

                        case 1801:
                            await SendMessageBatchAsFastAsPossible1801(dtSMS, i); break;
                        case 1802:
                            await SendMessageBatchAsFastAsPossible1802(dtSMS, i); break;
                        case 1803:
                            await SendMessageBatchAsFastAsPossible1803(dtSMS, i); break;
                        case 1804:
                            await SendMessageBatchAsFastAsPossible1804(dtSMS, i); break;
                        case 1805:
                            await SendMessageBatchAsFastAsPossible1805(dtSMS, i); break;
                        case 1806:
                            await SendMessageBatchAsFastAsPossible1806(dtSMS, i); break;
                        case 1807:
                            await SendMessageBatchAsFastAsPossible1807(dtSMS, i); break;
                        case 1808:
                            await SendMessageBatchAsFastAsPossible1808(dtSMS, i); break;
                        case 1809:
                            await SendMessageBatchAsFastAsPossible1809(dtSMS, i); break;
                        case 1810:
                            await SendMessageBatchAsFastAsPossible1810(dtSMS, i); break;

                        case 1901:
                            await SendMessageBatchAsFastAsPossible1901(dtSMS, i); break;
                        case 1902:
                            await SendMessageBatchAsFastAsPossible1902(dtSMS, i); break;
                        case 1903:
                            await SendMessageBatchAsFastAsPossible1903(dtSMS, i); break;
                        case 1904:
                            await SendMessageBatchAsFastAsPossible1904(dtSMS, i); break;
                        case 1905:
                            await SendMessageBatchAsFastAsPossible1905(dtSMS, i); break;
                        case 1906:
                            await SendMessageBatchAsFastAsPossible1906(dtSMS, i); break;
                        case 1907:
                            await SendMessageBatchAsFastAsPossible1907(dtSMS, i); break;
                        case 1908:
                            await SendMessageBatchAsFastAsPossible1908(dtSMS, i); break;
                        case 1909:
                            await SendMessageBatchAsFastAsPossible1909(dtSMS, i); break;
                        case 1910:
                            await SendMessageBatchAsFastAsPossible1910(dtSMS, i); break;

                        case 2001:
                            await SendMessageBatchAsFastAsPossible2001(dtSMS, i); break;
                        case 2002:
                            await SendMessageBatchAsFastAsPossible2002(dtSMS, i); break;
                        case 2003:
                            await SendMessageBatchAsFastAsPossible2003(dtSMS, i); break;
                        case 2004:
                            await SendMessageBatchAsFastAsPossible2004(dtSMS, i); break;
                        case 2005:
                            await SendMessageBatchAsFastAsPossible2005(dtSMS, i); break;
                        case 2006:
                            await SendMessageBatchAsFastAsPossible2006(dtSMS, i); break;
                        case 2007:
                            await SendMessageBatchAsFastAsPossible2007(dtSMS, i); break;
                        case 2008:
                            await SendMessageBatchAsFastAsPossible2008(dtSMS, i); break;
                        case 2009:
                            await SendMessageBatchAsFastAsPossible2009(dtSMS, i); break;
                        case 2010:
                            await SendMessageBatchAsFastAsPossible2010(dtSMS, i); break;

                        case 2101:
                            await SendMessageBatchAsFastAsPossible2101(dtSMS, i); break;
                        case 2102:
                            await SendMessageBatchAsFastAsPossible2102(dtSMS, i); break;
                        case 2103:
                            await SendMessageBatchAsFastAsPossible2103(dtSMS, i); break;
                        case 2104:
                            await SendMessageBatchAsFastAsPossible2104(dtSMS, i); break;
                        case 2105:
                            await SendMessageBatchAsFastAsPossible2105(dtSMS, i); break;
                        case 2106:
                            await SendMessageBatchAsFastAsPossible2106(dtSMS, i); break;
                        case 2107:
                            await SendMessageBatchAsFastAsPossible2107(dtSMS, i); break;
                        case 2108:
                            await SendMessageBatchAsFastAsPossible2108(dtSMS, i); break;
                        case 2109:
                            await SendMessageBatchAsFastAsPossible2109(dtSMS, i); break;
                        case 2110:
                            await SendMessageBatchAsFastAsPossible2110(dtSMS, i); break;

                        case 2201:
                            await SendMessageBatchAsFastAsPossible2201(dtSMS, i); break;
                        case 2202:
                            await SendMessageBatchAsFastAsPossible2202(dtSMS, i); break;
                        case 2203:
                            await SendMessageBatchAsFastAsPossible2203(dtSMS, i); break;
                        case 2204:
                            await SendMessageBatchAsFastAsPossible2204(dtSMS, i); break;
                        case 2205:
                            await SendMessageBatchAsFastAsPossible2205(dtSMS, i); break;
                        case 2206:
                            await SendMessageBatchAsFastAsPossible2206(dtSMS, i); break;
                        case 2207:
                            await SendMessageBatchAsFastAsPossible2207(dtSMS, i); break;
                        case 2208:
                            await SendMessageBatchAsFastAsPossible2208(dtSMS, i); break;
                        case 2209:
                            await SendMessageBatchAsFastAsPossible2209(dtSMS, i); break;
                        case 2210:
                            await SendMessageBatchAsFastAsPossible2210(dtSMS, i); break;

                        case 2301:
                            await SendMessageBatchAsFastAsPossible2301(dtSMS, i); break;
                        case 2302:
                            await SendMessageBatchAsFastAsPossible2302(dtSMS, i); break;
                        case 2303:
                            await SendMessageBatchAsFastAsPossible2303(dtSMS, i); break;
                        case 2304:
                            await SendMessageBatchAsFastAsPossible2304(dtSMS, i); break;
                        case 2305:
                            await SendMessageBatchAsFastAsPossible2305(dtSMS, i); break;
                        case 2306:
                            await SendMessageBatchAsFastAsPossible2306(dtSMS, i); break;
                        case 2307:
                            await SendMessageBatchAsFastAsPossible2307(dtSMS, i); break;
                        case 2308:
                            await SendMessageBatchAsFastAsPossible2308(dtSMS, i); break;
                        case 2309:
                            await SendMessageBatchAsFastAsPossible2309(dtSMS, i); break;
                        case 2310:
                            await SendMessageBatchAsFastAsPossible2310(dtSMS, i); break;

                        case 2401:
                            await SendMessageBatchAsFastAsPossible2401(dtSMS, i); break;
                        case 2402:
                            await SendMessageBatchAsFastAsPossible2402(dtSMS, i); break;
                        case 2403:
                            await SendMessageBatchAsFastAsPossible2403(dtSMS, i); break;
                        case 2404:
                            await SendMessageBatchAsFastAsPossible2404(dtSMS, i); break;
                        case 2405:
                            await SendMessageBatchAsFastAsPossible2405(dtSMS, i); break;
                        case 2406:
                            await SendMessageBatchAsFastAsPossible2406(dtSMS, i); break;
                        case 2407:
                            await SendMessageBatchAsFastAsPossible2407(dtSMS, i); break;
                        case 2408:
                            await SendMessageBatchAsFastAsPossible2408(dtSMS, i); break;
                        case 2409:
                            await SendMessageBatchAsFastAsPossible2409(dtSMS, i); break;
                        case 2410:
                            await SendMessageBatchAsFastAsPossible2410(dtSMS, i); break;

                        case 2501:
                            await SendMessageBatchAsFastAsPossible2501(dtSMS, i); break;
                        case 2502:
                            await SendMessageBatchAsFastAsPossible2502(dtSMS, i); break;
                        case 2503:
                            await SendMessageBatchAsFastAsPossible2503(dtSMS, i); break;
                        case 2504:
                            await SendMessageBatchAsFastAsPossible2504(dtSMS, i); break;
                        case 2505:
                            await SendMessageBatchAsFastAsPossible2505(dtSMS, i); break;
                        case 2506:
                            await SendMessageBatchAsFastAsPossible2506(dtSMS, i); break;
                        case 2507:
                            await SendMessageBatchAsFastAsPossible2507(dtSMS, i); break;
                        case 2508:
                            await SendMessageBatchAsFastAsPossible2508(dtSMS, i); break;
                        case 2509:
                            await SendMessageBatchAsFastAsPossible2509(dtSMS, i); break;
                        case 2510:
                            await SendMessageBatchAsFastAsPossible2510(dtSMS, i); break;

                        case 2601:
                            await SendMessageBatchAsFastAsPossible2601(dtSMS, i); break;
                        case 2602:
                            await SendMessageBatchAsFastAsPossible2602(dtSMS, i); break;
                        case 2603:
                            await SendMessageBatchAsFastAsPossible2603(dtSMS, i); break;
                        case 2604:
                            await SendMessageBatchAsFastAsPossible2604(dtSMS, i); break;
                        case 2605:
                            await SendMessageBatchAsFastAsPossible2605(dtSMS, i); break;
                        case 2606:
                            await SendMessageBatchAsFastAsPossible2606(dtSMS, i); break;
                        case 2607:
                            await SendMessageBatchAsFastAsPossible2607(dtSMS, i); break;
                        case 2608:
                            await SendMessageBatchAsFastAsPossible2608(dtSMS, i); break;
                        case 2609:
                            await SendMessageBatchAsFastAsPossible2609(dtSMS, i); break;
                        case 2610:
                            await SendMessageBatchAsFastAsPossible2610(dtSMS, i); break;

                        case 2701:
                            await SendMessageBatchAsFastAsPossible2701(dtSMS, i); break;
                        case 2702:
                            await SendMessageBatchAsFastAsPossible2702(dtSMS, i); break;
                        case 2703:
                            await SendMessageBatchAsFastAsPossible2703(dtSMS, i); break;
                        case 2704:
                            await SendMessageBatchAsFastAsPossible2704(dtSMS, i); break;
                        case 2705:
                            await SendMessageBatchAsFastAsPossible2705(dtSMS, i); break;
                        case 2706:
                            await SendMessageBatchAsFastAsPossible2706(dtSMS, i); break;
                        case 2707:
                            await SendMessageBatchAsFastAsPossible2707(dtSMS, i); break;
                        case 2708:
                            await SendMessageBatchAsFastAsPossible2708(dtSMS, i); break;
                        case 2709:
                            await SendMessageBatchAsFastAsPossible2709(dtSMS, i); break;
                        case 2710:
                            await SendMessageBatchAsFastAsPossible2710(dtSMS, i); break;

                        case 2801:
                            await SendMessageBatchAsFastAsPossible2801(dtSMS, i); break;
                        case 2802:
                            await SendMessageBatchAsFastAsPossible2802(dtSMS, i); break;
                        case 2803:
                            await SendMessageBatchAsFastAsPossible2803(dtSMS, i); break;
                        case 2804:
                            await SendMessageBatchAsFastAsPossible2804(dtSMS, i); break;
                        case 2805:
                            await SendMessageBatchAsFastAsPossible2805(dtSMS, i); break;
                        case 2806:
                            await SendMessageBatchAsFastAsPossible2806(dtSMS, i); break;
                        case 2807:
                            await SendMessageBatchAsFastAsPossible2807(dtSMS, i); break;
                        case 2808:
                            await SendMessageBatchAsFastAsPossible2808(dtSMS, i); break;
                        case 2809:
                            await SendMessageBatchAsFastAsPossible2809(dtSMS, i); break;
                        case 2810:
                            await SendMessageBatchAsFastAsPossible2810(dtSMS, i); break;

                        case 2901:
                            await SendMessageBatchAsFastAsPossible2901(dtSMS, i); break;
                        case 2902:
                            await SendMessageBatchAsFastAsPossible2902(dtSMS, i); break;
                        case 2903:
                            await SendMessageBatchAsFastAsPossible2903(dtSMS, i); break;
                        case 2904:
                            await SendMessageBatchAsFastAsPossible2904(dtSMS, i); break;
                        case 2905:
                            await SendMessageBatchAsFastAsPossible2905(dtSMS, i); break;
                        case 2906:
                            await SendMessageBatchAsFastAsPossible2906(dtSMS, i); break;
                        case 2907:
                            await SendMessageBatchAsFastAsPossible2907(dtSMS, i); break;
                        case 2908:
                            await SendMessageBatchAsFastAsPossible2908(dtSMS, i); break;
                        case 2909:
                            await SendMessageBatchAsFastAsPossible2909(dtSMS, i); break;
                        case 2910:
                            await SendMessageBatchAsFastAsPossible2910(dtSMS, i); break;

                        case 3001:
                            await SendMessageBatchAsFastAsPossible3001(dtSMS, i); break;
                        case 3002:
                            await SendMessageBatchAsFastAsPossible3002(dtSMS, i); break;
                        case 3003:
                            await SendMessageBatchAsFastAsPossible3003(dtSMS, i); break;
                        case 3004:
                            await SendMessageBatchAsFastAsPossible3004(dtSMS, i); break;
                        case 3005:
                            await SendMessageBatchAsFastAsPossible3005(dtSMS, i); break;
                        case 3006:
                            await SendMessageBatchAsFastAsPossible3006(dtSMS, i); break;
                        case 3007:
                            await SendMessageBatchAsFastAsPossible3007(dtSMS, i); break;
                        case 3008:
                            await SendMessageBatchAsFastAsPossible3008(dtSMS, i); break;
                        case 3009:
                            await SendMessageBatchAsFastAsPossible3009(dtSMS, i); break;
                        case 3010:
                            await SendMessageBatchAsFastAsPossible3010(dtSMS, i); break;

                        case 3101:
                            await SendMessageBatchAsFastAsPossible3101(dtSMS, i); break;
                        case 3102:
                            await SendMessageBatchAsFastAsPossible3102(dtSMS, i); break;
                        case 3103:
                            await SendMessageBatchAsFastAsPossible3103(dtSMS, i); break;
                        case 3104:
                            await SendMessageBatchAsFastAsPossible3104(dtSMS, i); break;
                        case 3105:
                            await SendMessageBatchAsFastAsPossible3105(dtSMS, i); break;
                        case 3106:
                            await SendMessageBatchAsFastAsPossible3106(dtSMS, i); break;
                        case 3107:
                            await SendMessageBatchAsFastAsPossible3107(dtSMS, i); break;
                        case 3108:
                            await SendMessageBatchAsFastAsPossible3108(dtSMS, i); break;
                        case 3109:
                            await SendMessageBatchAsFastAsPossible3109(dtSMS, i); break;
                        case 3110:
                            await SendMessageBatchAsFastAsPossible3110(dtSMS, i); break;

                        case 3201:
                            await SendMessageBatchAsFastAsPossible3201(dtSMS, i); break;
                        case 3202:
                            await SendMessageBatchAsFastAsPossible3202(dtSMS, i); break;
                        case 3203:
                            await SendMessageBatchAsFastAsPossible3203(dtSMS, i); break;
                        case 3204:
                            await SendMessageBatchAsFastAsPossible3204(dtSMS, i); break;
                        case 3205:
                            await SendMessageBatchAsFastAsPossible3205(dtSMS, i); break;
                        case 3206:
                            await SendMessageBatchAsFastAsPossible3206(dtSMS, i); break;
                        case 3207:
                            await SendMessageBatchAsFastAsPossible3207(dtSMS, i); break;
                        case 3208:
                            await SendMessageBatchAsFastAsPossible3208(dtSMS, i); break;
                        case 3209:
                            await SendMessageBatchAsFastAsPossible3209(dtSMS, i); break;
                        case 3210:
                            await SendMessageBatchAsFastAsPossible3210(dtSMS, i); break;

                        case 3301:
                            await SendMessageBatchAsFastAsPossible3301(dtSMS, i); break;
                        case 3302:
                            await SendMessageBatchAsFastAsPossible3302(dtSMS, i); break;
                        case 3303:
                            await SendMessageBatchAsFastAsPossible3303(dtSMS, i); break;
                        case 3304:
                            await SendMessageBatchAsFastAsPossible3304(dtSMS, i); break;
                        case 3305:
                            await SendMessageBatchAsFastAsPossible3305(dtSMS, i); break;
                        case 3306:
                            await SendMessageBatchAsFastAsPossible3306(dtSMS, i); break;
                        case 3307:
                            await SendMessageBatchAsFastAsPossible3307(dtSMS, i); break;
                        case 3308:
                            await SendMessageBatchAsFastAsPossible3308(dtSMS, i); break;
                        case 3309:
                            await SendMessageBatchAsFastAsPossible3309(dtSMS, i); break;
                        case 3310:
                            await SendMessageBatchAsFastAsPossible3310(dtSMS, i); break;

                        case 3401:
                            await SendMessageBatchAsFastAsPossible3401(dtSMS, i); break;
                        case 3402:
                            await SendMessageBatchAsFastAsPossible3402(dtSMS, i); break;
                        case 3403:
                            await SendMessageBatchAsFastAsPossible3403(dtSMS, i); break;
                        case 3404:
                            await SendMessageBatchAsFastAsPossible3404(dtSMS, i); break;
                        case 3405:
                            await SendMessageBatchAsFastAsPossible3405(dtSMS, i); break;
                        case 3406:
                            await SendMessageBatchAsFastAsPossible3406(dtSMS, i); break;
                        case 3407:
                            await SendMessageBatchAsFastAsPossible3407(dtSMS, i); break;
                        case 3408:
                            await SendMessageBatchAsFastAsPossible3408(dtSMS, i); break;
                        case 3409:
                            await SendMessageBatchAsFastAsPossible3409(dtSMS, i); break;
                        case 3410:
                            await SendMessageBatchAsFastAsPossible3410(dtSMS, i); break;

                        case 3501:
                            await SendMessageBatchAsFastAsPossible3501(dtSMS, i); break;
                        case 3502:
                            await SendMessageBatchAsFastAsPossible3502(dtSMS, i); break;
                        case 3503:
                            await SendMessageBatchAsFastAsPossible3503(dtSMS, i); break;
                        case 3504:
                            await SendMessageBatchAsFastAsPossible3504(dtSMS, i); break;
                        case 3505:
                            await SendMessageBatchAsFastAsPossible3505(dtSMS, i); break;
                        case 3506:
                            await SendMessageBatchAsFastAsPossible3506(dtSMS, i); break;
                        case 3507:
                            await SendMessageBatchAsFastAsPossible3507(dtSMS, i); break;
                        case 3508:
                            await SendMessageBatchAsFastAsPossible3508(dtSMS, i); break;
                        case 3509:
                            await SendMessageBatchAsFastAsPossible3509(dtSMS, i); break;
                        case 3510:
                            await SendMessageBatchAsFastAsPossible3510(dtSMS, i); break;

                        case 3601:
                            await SendMessageBatchAsFastAsPossible3601(dtSMS, i); break;
                        case 3602:
                            await SendMessageBatchAsFastAsPossible3602(dtSMS, i); break;
                        case 3603:
                            await SendMessageBatchAsFastAsPossible3603(dtSMS, i); break;
                        case 3604:
                            await SendMessageBatchAsFastAsPossible3604(dtSMS, i); break;
                        case 3605:
                            await SendMessageBatchAsFastAsPossible3605(dtSMS, i); break;
                        case 3606:
                            await SendMessageBatchAsFastAsPossible3606(dtSMS, i); break;
                        case 3607:
                            await SendMessageBatchAsFastAsPossible3607(dtSMS, i); break;
                        case 3608:
                            await SendMessageBatchAsFastAsPossible3608(dtSMS, i); break;
                        case 3609:
                            await SendMessageBatchAsFastAsPossible3609(dtSMS, i); break;
                        case 3610:
                            await SendMessageBatchAsFastAsPossible3610(dtSMS, i); break;

                        case 3701:
                            await SendMessageBatchAsFastAsPossible3701(dtSMS, i); break;
                        case 3702:
                            await SendMessageBatchAsFastAsPossible3702(dtSMS, i); break;
                        case 3703:
                            await SendMessageBatchAsFastAsPossible3703(dtSMS, i); break;
                        case 3704:
                            await SendMessageBatchAsFastAsPossible3704(dtSMS, i); break;
                        case 3705:
                            await SendMessageBatchAsFastAsPossible3705(dtSMS, i); break;
                        case 3706:
                            await SendMessageBatchAsFastAsPossible3706(dtSMS, i); break;
                        case 3707:
                            await SendMessageBatchAsFastAsPossible3707(dtSMS, i); break;
                        case 3708:
                            await SendMessageBatchAsFastAsPossible3708(dtSMS, i); break;
                        case 3709:
                            await SendMessageBatchAsFastAsPossible3709(dtSMS, i); break;
                        case 3710:
                            await SendMessageBatchAsFastAsPossible3710(dtSMS, i); break;

                        case 3801:
                            await SendMessageBatchAsFastAsPossible3801(dtSMS, i); break;
                        case 3802:
                            await SendMessageBatchAsFastAsPossible3802(dtSMS, i); break;
                        case 3803:
                            await SendMessageBatchAsFastAsPossible3803(dtSMS, i); break;
                        case 3804:
                            await SendMessageBatchAsFastAsPossible3804(dtSMS, i); break;
                        case 3805:
                            await SendMessageBatchAsFastAsPossible3805(dtSMS, i); break;
                        case 3806:
                            await SendMessageBatchAsFastAsPossible3806(dtSMS, i); break;
                        case 3807:
                            await SendMessageBatchAsFastAsPossible3807(dtSMS, i); break;
                        case 3808:
                            await SendMessageBatchAsFastAsPossible3808(dtSMS, i); break;
                        case 3809:
                            await SendMessageBatchAsFastAsPossible3809(dtSMS, i); break;
                        case 3810:
                            await SendMessageBatchAsFastAsPossible3810(dtSMS, i); break;

                        case 3901:
                            await SendMessageBatchAsFastAsPossible3901(dtSMS, i); break;
                        case 3902:
                            await SendMessageBatchAsFastAsPossible3902(dtSMS, i); break;
                        case 3903:
                            await SendMessageBatchAsFastAsPossible3903(dtSMS, i); break;
                        case 3904:
                            await SendMessageBatchAsFastAsPossible3904(dtSMS, i); break;
                        case 3905:
                            await SendMessageBatchAsFastAsPossible3905(dtSMS, i); break;
                        case 3906:
                            await SendMessageBatchAsFastAsPossible3906(dtSMS, i); break;
                        case 3907:
                            await SendMessageBatchAsFastAsPossible3907(dtSMS, i); break;
                        case 3908:
                            await SendMessageBatchAsFastAsPossible3908(dtSMS, i); break;
                        case 3909:
                            await SendMessageBatchAsFastAsPossible3909(dtSMS, i); break;
                        case 3910:
                            await SendMessageBatchAsFastAsPossible3910(dtSMS, i); break;

                        case 4001:
                            await SendMessageBatchAsFastAsPossible4001(dtSMS, i); break;
                        case 4002:
                            await SendMessageBatchAsFastAsPossible4002(dtSMS, i); break;
                        case 4003:
                            await SendMessageBatchAsFastAsPossible4003(dtSMS, i); break;
                        case 4004:
                            await SendMessageBatchAsFastAsPossible4004(dtSMS, i); break;
                        case 4005:
                            await SendMessageBatchAsFastAsPossible4005(dtSMS, i); break;
                        case 4006:
                            await SendMessageBatchAsFastAsPossible4006(dtSMS, i); break;
                        case 4007:
                            await SendMessageBatchAsFastAsPossible4007(dtSMS, i); break;
                        case 4008:
                            await SendMessageBatchAsFastAsPossible4008(dtSMS, i); break;
                        case 4009:
                            await SendMessageBatchAsFastAsPossible4009(dtSMS, i); break;
                        case 4010:
                            await SendMessageBatchAsFastAsPossible4010(dtSMS, i); break;

                        case 8201:
                            await SendMessageBatchAsFastAsPossible8201(dtSMS, i); break;
                        case 8202:
                            await SendMessageBatchAsFastAsPossible8202(dtSMS, i); break;
                        case 8203:
                            await SendMessageBatchAsFastAsPossible8203(dtSMS, i); break;
                        case 8204:
                            await SendMessageBatchAsFastAsPossible8204(dtSMS, i); break;
                        case 8205:
                            await SendMessageBatchAsFastAsPossible8205(dtSMS, i); break;
                        case 8206:
                            await SendMessageBatchAsFastAsPossible8206(dtSMS, i); break;
                        case 8207:
                            await SendMessageBatchAsFastAsPossible8207(dtSMS, i); break;
                        case 8208:
                            await SendMessageBatchAsFastAsPossible8208(dtSMS, i); break;
                        case 8209:
                            await SendMessageBatchAsFastAsPossible8209(dtSMS, i); break;
                        case 8210:
                            await SendMessageBatchAsFastAsPossible8210(dtSMS, i); break;

                        default:
                            //await SendMessageBatchAsFastAsPossible(dtSMS, i);
                            break;

                    }

                    #endregion

                    //await SendMessageBatchAsFastAsPossibleTESTING(dtSMS, i);
                    //obU.InfoTest("frm SendMessage for " + i.ToString() + " MsgSend end");
                }
                else
                    _log.Info("Connection status not opened. ");

                //obU.InfoTest("frm SendMessage for " + i.ToString() + " set inprocess false");
                clsCheck.inprocess[i] = false;
            }
            catch (Exception ex)
            {
                int acId1 = Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]);
                _log.Info("err On SendMessage for " + acId1.ToString() + ". " + ex.Message + ". " + ex.StackTrace);
                throw;
                //clsCheck.inprocess[i] = false;
            }
        }

        //public void AddInMsgSubmitted2(DataTable dtSMS, DateTime sendTime)
        //{
        //    for (int i = 0; i < dtSMS.Rows.Count; i++)
        //    {
        //        Random a = new Random();
        //        int x = a.Next(1, 32000);
        //        string s = Convert.ToString(new Guid());
        //        obU.AddInMsgSubmitted(DateTime.Now.ToString("ddMMyyyyHHmmssfffffff") + x.ToString() + s, dtSMS.Rows[i], sendTime);
        //    }
        //    obU.RemoveFromMsgTran(dtSMS.Rows[0]["SMPPACCOUNTID"].ToString());
        //}

        public async Task<IList<SubmitSmResp>> testmethod()
        {
            IList<SubmitSmResp> AB = null;
            await Task.Delay(200);
            return AB;
        }

        public async Task<IList<SubmitSmResp>> SubmitAsync22(List<SubmitSm> a)
        {
            IList<SubmitSmResp> AB = null;
            foreach (SubmitSm s in a)
            {
                SubmitSmResp ob = new SubmitSmResp(); ob.Header.Status = CommandStatus.ESME_ROK; ob.MessageId = Guid.NewGuid().ToString();
                AB.Add(ob);
            }
            await Task.Delay(200);
            return AB;
        }

        public async Task SendMessageBatchAsFastAsPossibleTESTING(DataTable dtSMSMAIN, int i)
        {
            //obU.InfoTest("frm SendMessageTESTING main for " + i.ToString() + " MsgSend start");
            try
            {
                //var sourceAddress = new SmeAddress(dt.Rows[i]["SOURCE_ADDRESS"].ToString(), (AddressTON)byte.Parse(dt.Rows[i]["TON_S"].ToString()), (AddressNPI)byte.Parse(dt.Rows[i]["NPI_S"].ToString()));
                var sourceAddress = new SmeAddress(dtSMSMAIN.Rows[0]["senderid"].ToString(), (AddressTON)byte.Parse(dt.Rows[i]["TON_S"].ToString()), (AddressNPI)byte.Parse(dt.Rows[i]["NPI_S"].ToString()));
                //AddInMsgSubmitted2(dtSMS, DateTime.Now);
                DataTable dtSMS = new DataTable();
                dtSMS.Columns.Add("ID", typeof(string));
                dtSMS.Columns.Add("PROVIDER", typeof(string));
                dtSMS.Columns.Add("SMPPACCOUNTID", typeof(int));
                dtSMS.Columns.Add("PROFILEID", typeof(string));
                dtSMS.Columns.Add("MSGTEXT", typeof(string));
                dtSMS.Columns.Add("TOMOBILE", typeof(string));
                dtSMS.Columns.Add("SENDERID", typeof(string));
                dtSMS.Columns.Add("CREATEDAT", typeof(DateTime));
                dtSMS.Columns.Add("FILEID", typeof(int));

                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    try
                    {
                        dtSMS.Rows.Clear();
                        for (int j = 0; j < pdulimit; j++)
                        {
                            if (m < rowcnt)
                            {
                                DataRow dr = dtSMS.NewRow();
                                dr["ID"] = Convert.ToString(dtSMSMAIN.Rows[m]["ID"]);
                                dr["PROVIDER"] = provider + " - " + systemId;
                                dr["SMPPACCOUNTID"] = Convert.ToString(dtSMSMAIN.Rows[m]["SMPPACCOUNTID"]);
                                dr["PROFILEID"] = Convert.ToString(dtSMSMAIN.Rows[m]["PROFILEID"]);
                                dr["MSGTEXT"] = Convert.ToString(dtSMSMAIN.Rows[m]["MSGTEXT"]);
                                dr["TOMOBILE"] = Convert.ToString(dtSMSMAIN.Rows[m]["TOMOBILE"]);
                                dr["SENDERID"] = Convert.ToString(dtSMSMAIN.Rows[m]["SENDERID"]);
                                dr["CREATEDAT"] = Convert.ToDateTime(dtSMSMAIN.Rows[m]["CREATEDAT"]);
                                dr["FILEID"] = dtSMSMAIN.Rows[m]["FILEID"];
                                dtSMS.Rows.Add(dr);
                                m++;
                            }
                        }
                        DataCodings coding = (DataCodings)Enum.Parse(typeof(DataCodings), "Default");

                        List<SubmitSm> pduList = new List<SubmitSm>();
                        foreach (DataRow dr in dtSMS.Rows)
                        {
                            var pduBuilder = SMS.ForSubmit()
                                .From(sourceAddress)
                                .To(dr["TOMOBILE"].ToString())
                                .Coding(coding)
                                .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                                .Text(dr["MSGTEXT"].ToString());

                            pduList.AddRange(pduBuilder.Create(_client[i]));
                        }

                        DateTime startSendTime = DateTime.Now;
                        TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                        double dif = ts.TotalMilliseconds;
                        if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));

                        int rnd = (new Random()).Next(1, 99999);

                        IList<SubmitSmResp> resp = await testmethod();
                        DateTime sendTime = DateTime.Now;
                        clsCheck.prodDt[i] = sendTime;

                        AddInMsgTEST(dtSMS);
                    }
                    catch (Exception ex) { _log.Info_Err(ex.Message, i); }
                    //System.Threading.Thread.Sleep(200);
                }
                //obU.RemoveFromMsgTran(dtSMS.Rows[0]["SMPPACCOUNTID"].ToString());
            }
            catch (Exception ex4)
            {
                _log.Info_Err(ex4.Message, i);
            }

            //obU.InfoTest("frm SendMessageTESTING main for " + i.ToString() + " MsgSend ended");
        }


        public DataTable getDtSMS()
        {
            DataTable dtSMS = new DataTable();
            dtSMS.Columns.Add("ID", typeof(string));
            dtSMS.Columns.Add("PROVIDER", typeof(string));
            dtSMS.Columns.Add("SMPPACCOUNTID", typeof(int));
            dtSMS.Columns.Add("PROFILEID", typeof(string));
            dtSMS.Columns.Add("MSGTEXT", typeof(string));
            dtSMS.Columns.Add("TOMOBILE", typeof(string));
            dtSMS.Columns.Add("SENDERID", typeof(string));
            dtSMS.Columns.Add("CREATEDAT", typeof(DateTime));
            dtSMS.Columns.Add("FILEID", typeof(int));
            dtSMS.Columns.Add("PEID", typeof(string));
            dtSMS.Columns.Add("TEMPLATEID", typeof(string));
            dtSMS.Columns.Add("DATACODE", typeof(string));
            dtSMS.Columns.Add("MSGID2", typeof(string));
            dtSMS.Columns.Add("DLRCODE", typeof(string));
            dtSMS.Columns.Add("REFID", typeof(string));
            return dtSMS;
        }

        public DataRow addInDataRow(DataTable dtSMS, DataRow drSMSMAIN, string provider,string systemId)
        {
            DataRow dr = dtSMS.NewRow();
            dr["ID"] = Convert.ToString(drSMSMAIN["ID"]);
            dr["PROVIDER"] = provider + " - " + systemId;
            dr["SMPPACCOUNTID"] = Convert.ToString(drSMSMAIN["SMPPACCOUNTID"]);
            dr["PROFILEID"] = Convert.ToString(drSMSMAIN["PROFILEID"]);
            dr["MSGTEXT"] = Convert.ToString(drSMSMAIN["MSGTEXT"]);
            dr["TOMOBILE"] = Convert.ToString(drSMSMAIN["TOMOBILE"]);
            dr["SENDERID"] = Convert.ToString(drSMSMAIN["SENDERID"]);
            dr["CREATEDAT"] = Convert.ToDateTime(drSMSMAIN["CREATEDAT"]);
            dr["FILEID"] = drSMSMAIN["FILEID"];
            dr["PEID"] = drSMSMAIN["PEID"];
            dr["TEMPLATEID"] = drSMSMAIN["TEMPLATEID"];
            dr["DATACODE"] = drSMSMAIN["DATACODE"];
            dr["MSGID2"] = drSMSMAIN["MSGID2"];
            dr["DLRCODE"] = Convert.ToString(drSMSMAIN["DLRCODE"]);
            dr["REFID"] = Convert.ToString(Guid.NewGuid());
            return dr;
        }

        public List<SubmitSm> makePDU(ref DataTable dtSMS, string TON_S, string NPI_S,int expMin, string provider, int i)
        {
            List<SubmitSm> pduList = new List<SubmitSm>();

            for (int w = dtSMS.Rows.Count - 1; w >= 0; w--)
            {
                DataRow dr = dtSMS.Rows[w];
                //check on not send db
                Int64 chk2Send = obU.Check2SendMSG(dr);

                if (chk2Send > 0)
                {
                    dr.Delete();
                }
                else
                {
                    int mobcnt = obU.GetDuplicateCount(dr["TOMOBILE"].ToString(), dr["MSGTEXT"].ToString(), Convert.ToString(dr["FILEID"]), Convert.ToString(dr["PROFILEID"]));
                    if (mobcnt <= 0)
                    {
                        var sourceAddress = new SmeAddress(dr["senderid"].ToString(), (AddressTON)byte.Parse(TON_S), (AddressNPI)byte.Parse(NPI_S));
                        DataCodings coding = (DataCodings)Enum.Parse(typeof(DataCodings), dr["DATACODE"].ToString());
                        if ((Convert.ToString(dr["PEID"]) != "") && (Convert.ToString(dr["TEMPLATEID"]) != ""))
                        {
                            var pduBuilder = SMS.ForSubmit()
                            .From(sourceAddress)
                            .To(dr["TOMOBILE"].ToString())
                            .Coding(coding)
                            .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                            .Text(dr["MSGTEXT"].ToString())
                            .AddParameter(0x1400, Convert.ToString(dr["PEID"]))
                            .AddParameter(0x1401, Convert.ToString(dr["TEMPLATEID"]))
                            .AddParameter(0x8736, Convert.ToString(dr["REFID"]));

                            if (expMin==108)
                            {
                                pduBuilder = SMS.ForSubmit()
                                .From(sourceAddress)
                                .To(dr["TOMOBILE"].ToString())
                                .Coding(coding)
                                .DeliveryReceipt()
                                .Text(dr["MSGTEXT"].ToString())
                                .AddParameter(0x1400, Convert.ToString(dr["PEID"]))
                                .AddParameter(0x1401, Convert.ToString(dr["TEMPLATEID"]))
                                .AddParameter(0x8736, Convert.ToString(dr["REFID"]));
                                
                            }

                            if (provider.Contains("AIRTEL"))
                            {
                                if (expMin == 108)
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt()
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, obU.getPEID(provider, Convert.ToString(dr["PEID"])))
                                    .AddParameter(0x1401, obU.getTEMPLATEID(provider, Convert.ToString(dr["TEMPLATEID"])))
                                    .AddParameter(0x1402, obU.getTMID(provider))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                                else
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, obU.getPEID(provider, Convert.ToString(dr["PEID"])))
                                    .AddParameter(0x1401, obU.getTEMPLATEID(provider, Convert.ToString(dr["TEMPLATEID"])))
                                    .AddParameter(0x1402, obU.getTMID(provider))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                            }
                            if (provider.Contains("ETISALAT"))
                            {
                                if (expMin == 108)
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt()
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, System.Text.Encoding.UTF8.GetBytes(""))
                                    .AddParameter(0x1401, System.Text.Encoding.UTF8.GetBytes((Convert.ToString(dr["senderid"]).ToUpper().StartsWith("AD-") || Convert.ToString(dr["senderid"]).ToUpper().EndsWith("-AD") ? "" : "txn")))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                                else
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, System.Text.Encoding.UTF8.GetBytes(""))
                                    .AddParameter(0x1401, System.Text.Encoding.UTF8.GetBytes((Convert.ToString(dr["senderid"]).ToUpper().StartsWith("AD-") || Convert.ToString(dr["senderid"]).ToUpper().EndsWith("-AD") ? "" : "txn")))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                            }
                            pduList.AddRange(pduBuilder.Create(_client[i]));
                        }
                        else if ((Convert.ToString(dr["PEID"]) != "") && (Convert.ToString(dr["TEMPLATEID"]) == ""))
                        {
                            var pduBuilder = SMS.ForSubmit()
                            .From(sourceAddress)
                            .To(dr["TOMOBILE"].ToString())
                            .Coding(coding)
                            .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                            .Text(dr["MSGTEXT"].ToString())
                            .AddParameter(0x1400, Convert.ToString(dr["PEID"]))
                            .AddParameter(0x1401, Convert.ToString(dr["TEMPLATEID"]))
                            .AddParameter(0x8736, Convert.ToString(dr["REFID"]));

                            if (expMin == 108)
                            {
                                pduBuilder = SMS.ForSubmit()
                                .From(sourceAddress)
                                .To(dr["TOMOBILE"].ToString())
                                .Coding(coding)
                                .DeliveryReceipt()
                                .Text(dr["MSGTEXT"].ToString())
                                .AddParameter(0x1400, Convert.ToString(dr["PEID"]))
                                .AddParameter(0x1401, Convert.ToString(dr["TEMPLATEID"]))
                                .AddParameter(0x8736, Convert.ToString(dr["REFID"]));
                            }

                            if (provider.Contains("AIRTEL"))
                            {
                                if (expMin == 108)
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt()
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, obU.getPEID(provider, Convert.ToString(dr["PEID"])))
                                    .AddParameter(0x1401, obU.getTEMPLATEID(provider, Convert.ToString(dr["TEMPLATEID"])))
                                    .AddParameter(0x1402, obU.getTMID(provider))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                                else
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, obU.getPEID(provider, Convert.ToString(dr["PEID"])))
                                    .AddParameter(0x1401, obU.getTEMPLATEID(provider, Convert.ToString(dr["TEMPLATEID"])))
                                    .AddParameter(0x1402, obU.getTMID(provider))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                            }
                            if (provider.Contains("ETISALAT"))
                            {
                                if (expMin == 108)
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt()
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, System.Text.Encoding.UTF8.GetBytes(""))
                                    .AddParameter(0x1401, System.Text.Encoding.UTF8.GetBytes((Convert.ToString(dr["senderid"]).ToUpper().StartsWith("AD-") || Convert.ToString(dr["senderid"]).ToUpper().EndsWith("-AD") ? "" : "txn")))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                                else
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, System.Text.Encoding.UTF8.GetBytes(""))
                                    .AddParameter(0x1401, System.Text.Encoding.UTF8.GetBytes((Convert.ToString(dr["senderid"]).ToUpper().StartsWith("AD-") || Convert.ToString(dr["senderid"]).ToUpper().EndsWith("-AD") ? "" : "txn")))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                            }
                            pduList.AddRange(pduBuilder.Create(_client[i]));
                        }
                        else if ((Convert.ToString(dr["PEID"]) == "") && (Convert.ToString(dr["TEMPLATEID"]) != ""))
                        {
                            var pduBuilder = SMS.ForSubmit()
                            .From(sourceAddress)
                            .To(dr["TOMOBILE"].ToString())
                            .Coding(coding)
                            .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                            .Text(dr["MSGTEXT"].ToString())
                            .AddParameter(0x1400, Convert.ToString(dr["PEID"]))
                            .AddParameter(0x1401, Convert.ToString(dr["TEMPLATEID"]))
                            .AddParameter(0x8736, Convert.ToString(dr["REFID"]));

                            if (expMin==108)
                            {
                                pduBuilder = SMS.ForSubmit()
                                .From(sourceAddress)
                                .To(dr["TOMOBILE"].ToString())
                                .Coding(coding)
                                .DeliveryReceipt()
                                .Text(dr["MSGTEXT"].ToString())
                                .AddParameter(0x1400, Convert.ToString(dr["PEID"]))
                                .AddParameter(0x1401, Convert.ToString(dr["TEMPLATEID"]))
                                .AddParameter(0x8736, Convert.ToString(dr["REFID"]));
                            }

                            if (provider.Contains("AIRTEL"))
                            {
                                if (expMin == 108)
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt()
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, obU.getPEID(provider, Convert.ToString(dr["PEID"])))
                                    .AddParameter(0x1401, obU.getTEMPLATEID(provider, Convert.ToString(dr["TEMPLATEID"])))
                                    .AddParameter(0x1402, obU.getTMID(provider))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                                else
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, obU.getPEID(provider, Convert.ToString(dr["PEID"])))
                                    .AddParameter(0x1401, obU.getTEMPLATEID(provider, Convert.ToString(dr["TEMPLATEID"])))
                                    .AddParameter(0x1402, obU.getTMID(provider))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                            }
                            if (provider.Contains("ETISALAT"))
                            {
                                if (expMin == 108)
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt()
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, System.Text.Encoding.UTF8.GetBytes(""))
                                    .AddParameter(0x1401, System.Text.Encoding.UTF8.GetBytes((Convert.ToString(dr["senderid"]).ToUpper().StartsWith("AD-") || Convert.ToString(dr["senderid"]).ToUpper().EndsWith("-AD") ? "" : "txn")))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                                else
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, System.Text.Encoding.UTF8.GetBytes(""))
                                    .AddParameter(0x1401, System.Text.Encoding.UTF8.GetBytes((Convert.ToString(dr["senderid"]).ToUpper().StartsWith("AD-") || Convert.ToString(dr["senderid"]).ToUpper().EndsWith("-AD") ? "" : "txn")))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                            }
                            pduList.AddRange(pduBuilder.Create(_client[i]));
                        }
                        else
                        {
                            var pduBuilder = SMS.ForSubmit()
                            .From(sourceAddress)
                            .To(dr["TOMOBILE"].ToString())
                            .Coding(coding)
                            .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                            .Text(dr["MSGTEXT"].ToString())
                            .AddParameter(0x8736, Convert.ToString(dr["REFID"]));

                            if (expMin==108)
                            {
                                pduBuilder = SMS.ForSubmit()
                                .From(sourceAddress)
                                .To(dr["TOMOBILE"].ToString())
                                .Coding(coding)
                                .DeliveryReceipt()
                                .Text(dr["MSGTEXT"].ToString());
                            }

                            if (provider.Contains("AIRTEL"))
                            {
                                if (expMin == 108)
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt()
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, obU.getPEID(provider, Convert.ToString(dr["PEID"])))
                                    .AddParameter(0x1401, obU.getTEMPLATEID(provider, Convert.ToString(dr["TEMPLATEID"])))
                                    .AddParameter(0x1402, obU.getTMID(provider))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                                else
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, obU.getPEID(provider, Convert.ToString(dr["PEID"])))
                                    .AddParameter(0x1401, obU.getTEMPLATEID(provider, Convert.ToString(dr["TEMPLATEID"])))
                                    .AddParameter(0x1402, obU.getTMID(provider))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                            }
                            if (provider.Contains("ETISALAT"))
                            {
                                if (expMin == 108)
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt()
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, System.Text.Encoding.UTF8.GetBytes(""))
                                    .AddParameter(0x1401, System.Text.Encoding.UTF8.GetBytes((Convert.ToString(dr["senderid"]).ToUpper().StartsWith("AD-") || Convert.ToString(dr["senderid"]).ToUpper().EndsWith("-AD") ? "" : "txn")))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                                else
                                {
                                    pduBuilder = SMS.ForSubmit()
                                    .From(sourceAddress)
                                    .To(dr["TOMOBILE"].ToString())
                                    .Coding(coding)
                                    .DeliveryReceipt().ExpireIn(TimeSpan.FromMinutes(expMin))
                                    .Text(dr["MSGTEXT"].ToString())
                                    .AddParameter(0x1400, System.Text.Encoding.UTF8.GetBytes(""))
                                    .AddParameter(0x1401, System.Text.Encoding.UTF8.GetBytes((Convert.ToString(dr["senderid"]).ToUpper().StartsWith("AD-") || Convert.ToString(dr["senderid"]).ToUpper().EndsWith("-AD") ? "" : "txn")))
                                    .AddParameter(0x8736, obU.getREFID(Convert.ToString(dr["REFID"])));
                                }
                            }
                            pduList.AddRange(pduBuilder.Create(_client[i]));
                        }
                    }
                    else
                        dr.Delete();
                }
            }
            dtSMS.AcceptChanges();
            return pduList;
        }
        public void saveResponse(IList<SubmitSmResp> resp,int i,int rnd,DataTable dtSMS)
        {
            DateTime sendTime = DateTime.Now;
            clsCheck.prodDt[i] = sendTime;
            _log.Info_Client("sTOPPED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));

            if (resp.All(x => x.Header.Status == CommandStatus.ESME_RINVSRCADR))
            {
                //INVALID SENDER ID
                string strResp = string.Join(",", resp.Select(x => x.MessageId));
                _log.Info_Failed("Submit Failed, Invalid Sender ID. MessageIds: " + strResp, i);
                //string[] strRsp = strResp.Split(',');
                //AddInMsgSubmittedInvalidSender(dtSMS, sendTime);
                AddInMsgSubmittedInvalidSenderNew(resp, dtSMS, sendTime);
            }
            else
            {

                if (resp.All(x => x.Header.Status == CommandStatus.ESME_ROK))
                {
                    string strResp = string.Join(",", resp.Select(x => x.MessageId));
                    _log.Info_Submit("Submit succeeded. MessageIds: " + strResp, i);
                    //if ((strResp + " " + txtLog.Text).Length > 2000)
                    //    txtLog.Text = (strResp + " " + txtLog.Text).Substring(0, 2000);
                    //else
                    //    txtLog.Text = strResp + " " + txtLog.Text;
                    string[] strRsp = strResp.Split(',');
                    //AddInMsgSubmitted(strRsp, dtSMS, sendTime);
                    AddInMsgSubmittedNew(resp, dtSMS, sendTime);
                }
                else
                {
                    _log.Info_Failed("Submit failed. Status: " + string.Join(",", resp.Select(x => x.Header.Status.ToString())), i);
                    string strResp = string.Join(",", resp.Select(x => x.MessageId));
                    _log.Info_Failed("Submit failed. MessageIds: " + strResp, i);
                    //if ((strResp + " " + txtLog.Text).Length > 2000)
                    //    txtLog.Text = (strResp + " " + txtLog.Text).Substring(0, 2000);
                    //else
                    //    txtLog.Text = strResp + " " + txtLog.Text;
                    string[] strRsp = strResp.Split(',');
                    //AddInMsgSubmitted(strRsp, dtSMS, sendTime);
                    AddInMsgSubmittedNew(resp, dtSMS, sendTime);
                }

            }
        }

        #region < Sending Methods Session Wise with FILE UPLOAD / Normal MSG >
        
        public async Task SendMessageBatchAsFastAsPossible101(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS(); 
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider , systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);                        
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible102(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible103(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible104(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible105(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible106(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible107(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible108(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible109(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible110(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible201(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible202(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible203(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible204(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible205(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible206(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible207(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible208(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible209(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible210(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible301(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible302(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible303(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible304(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible305(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible306(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible307(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible308(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible309(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible310(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible401(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible402(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible403(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible404(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible405(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible406(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible407(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible408(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible409(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible410(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible501(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible502(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible503(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible504(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible505(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible506(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible507(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible508(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible509(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible510(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible601(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible602(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible603(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible604(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible605(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible606(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible607(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible608(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible609(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible610(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible701(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible702(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible703(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible704(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible705(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible706(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible707(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible708(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible709(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible710(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible801(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible802(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible803(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible804(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible805(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible806(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible807(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible808(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible809(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible810(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible901(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible902(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible903(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible904(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible905(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible906(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible907(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible908(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible909(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible910(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible1001(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1002(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1003(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1004(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1005(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1006(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1007(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1008(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1009(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1010(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible1101(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1102(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1103(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1104(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1105(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1106(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1107(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1108(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1109(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1110(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible1201(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1202(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1203(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1204(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1205(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1206(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1207(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1208(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1209(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1210(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible1301(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1302(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1303(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1304(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1305(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1306(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1307(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1308(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1309(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1310(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible1401(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1402(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1403(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1404(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1405(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1406(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1407(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1408(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1409(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1410(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible1501(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1502(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1503(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1504(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1505(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1506(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1507(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1508(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1509(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1510(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible1601(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1602(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1603(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1604(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1605(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1606(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1607(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1608(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1609(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1610(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible1701(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1702(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1703(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1704(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1705(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1706(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1707(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1708(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1709(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1710(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible1801(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1802(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1803(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1804(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1805(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1806(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1807(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1808(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1809(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1810(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible1901(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1902(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1903(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1904(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1905(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1906(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1907(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1908(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1909(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible1910(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible2001(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2002(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2003(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2004(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2005(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2006(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2007(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2008(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2009(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2010(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible2101(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2102(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2103(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2104(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2105(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2106(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2107(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2108(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2109(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2110(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible2201(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2202(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2203(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2204(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2205(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2206(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2207(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2208(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2209(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2210(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible2301(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2302(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2303(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2304(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2305(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2306(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2307(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2308(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2309(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2310(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible2401(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2402(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2403(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2404(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2405(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2406(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2407(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2408(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2409(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2410(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible2501(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2502(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2503(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2504(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2505(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2506(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2507(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2508(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2509(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2510(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible2601(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2602(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2603(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2604(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2605(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2606(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2607(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2608(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2609(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2610(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible2701(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2702(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2703(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2704(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2705(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2706(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2707(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2708(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2709(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2710(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible2801(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2802(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2803(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2804(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2805(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2806(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2807(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2808(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2809(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2810(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible2901(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2902(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2903(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2904(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2905(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2906(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2907(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2908(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2909(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible2910(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible3001(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3002(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3003(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3004(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3005(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3006(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3007(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3008(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3009(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3010(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible3101(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3102(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3103(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3104(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3105(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3106(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3107(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3108(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3109(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3110(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible3201(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3202(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3203(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3204(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3205(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3206(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3207(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3208(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3209(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3210(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible3301(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3302(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3303(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3304(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3305(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3306(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3307(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3308(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3309(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3310(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible3401(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3402(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3403(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3404(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3405(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3406(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3407(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3408(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3409(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3410(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible3501(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3502(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3503(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3504(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3505(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3506(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3507(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3508(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3509(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3510(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible3601(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3602(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3603(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3604(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3605(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3606(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3607(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3608(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3609(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3610(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible3701(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3702(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3703(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3704(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3705(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3706(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3707(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3708(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3709(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3710(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible3801(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3802(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3803(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3804(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3805(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3806(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3807(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3808(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3809(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3810(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible3901(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3902(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3903(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3904(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3905(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3906(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3907(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3908(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3909(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible3910(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible4001(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible4002(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible4003(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible4004(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible4005(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible4006(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible4007(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible4008(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible4009(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible4010(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        public async Task SendMessageBatchAsFastAsPossible8201(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible8202(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible8203(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible8204(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible8205(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible8206(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible8207(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible8208(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible8209(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }
        public async Task SendMessageBatchAsFastAsPossible8210(DataTable dtSMSMAIN, int i)
        {
            try
            {
                DataTable dtSMS = getDtSMS();
                string provider = dt.Rows[i]["PROVIDER"].ToString(); string systemId = dt.Rows[i]["SYSTEMID"].ToString(); string TRANTABLENAME = dt.Rows[i]["TRANTABLENAME"].ToString();
                int expMin = Convert.ToInt16(dt.Rows[i]["SMSExpiryMinute"]);
                int pdulimit = Convert.ToInt16(dt.Rows[i]["PDUSIZE"]);
                string q = dtSMSMAIN.Rows[0]["MSGTEXT"].ToString().Trim();
                int n1 = 160;
                int count_PIPE = q.Count(f => f == '|');
                int qlen = q.Length + count_PIPE;
                int count_tild = q.Count(f => f == '~');
                qlen = qlen + count_tild;
                if (dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UCS2" || dtSMSMAIN.Rows[0]["DATACODE"].ToString().Trim().ToUpper() == "UNICODEFLASHSMS") { n1 = 70; qlen = q.Length; }
                if (qlen > n1) pdulimit = pdulimit / 2;
                int rowcnt = dtSMSMAIN.Rows.Count;
                int loopcnt = rowcnt / pdulimit;
                if (rowcnt % pdulimit > 0) loopcnt++;
                int m = 0;

                for (int k = 0; k < loopcnt; k++)
                {
                    dtSMS.Rows.Clear();
                    for (int j = 0; j < pdulimit; j++)
                    {
                        if (m < rowcnt)
                        {
                            dtSMS.Rows.Add(addInDataRow(dtSMS, dtSMSMAIN.Rows[m], provider, systemId));
                            m++;
                        }
                    }
                    int stopFileUpload = obU.getFileUploadStop();
                    if (stopFileUpload == 0)
                    {
                        List<SubmitSm> pduList = makePDU(ref dtSMS, dt.Rows[i]["TON_S"].ToString(), dt.Rows[i]["NPI_S"].ToString(), expMin, provider, i);
                        if (pduList.Count > 0)
                        {
                            DateTime startSendTime = DateTime.Now;
                            TimeSpan ts = startSendTime - clsCheck.prodDt[i];
                            double dif = ts.TotalMilliseconds;
                            if (dif < 1000 && dif > 0) System.Threading.Thread.Sleep(1000 - Convert.ToInt16(dif));
                            int rnd = (new Random()).Next(1, 99999);
                            _log.Info_Client("sTARTED .. " + rnd.ToString(), Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                            IList<SubmitSmResp> resp = await _client[i].SubmitAsync(pduList.ToArray());
                            saveResponse(resp, i, rnd, dtSMS);
                        }
                    }
                    else
                        AddInMsgStopped(dtSMS);
                }
                obU.RemoveFromMsgTran(dtSMSMAIN.Rows[0]["SMPPACCOUNTID"].ToString(), TRANTABLENAME);
            }
            catch (Exception ex4)
            {
                _log.Info_Err("Main Catch of Sending - " + ex4.Message + " " + ex4.StackTrace, Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]));
                throw;
            }
        }

        #endregion

        public void AddInMsgSubmittedInvalidSender(DataTable dtSMS, DateTime sendTime)
        {
            for (int i = 0; i < dtSMS.Rows.Count; i++)
            {
                string segment = Guid.NewGuid().ToString();
                obU.AddInMsgSubmittedInvalidSender(segment, dtSMS.Rows[i], sendTime);
            }
            //obU.RemoveFromMsgTran(dtSMS.Rows[0]["SMPPACCOUNTID"].ToString());
        }
        public void AddInMsgSubmittedInvalidSenderNew(IList<SubmitSmResp> resp, DataTable dtSMS, DateTime sendTime)
        {
            for (int i = 0; i < resp.Count; i++)
            {
                obU.AddInMsgSubmittedInvalidSenderNew(resp[i], dtSMS, sendTime);
            }
        }
        public void AddInMsgSubmitted(string[] strResp, DataTable dtSMS, DateTime sendTime)
        {
            //System.Threading.Thread t = new System.Threading.Thread(() =>
            //{
            InsertInMsgSubmitted(strResp, dtSMS, sendTime);
            //});
            //t.Start();

            //obU.RemoveFromMsgTran(dtSMS.Rows[0]["SMPPACCOUNTID"].ToString());
        }
        public void AddInMsgSubmittedNew(IList<SubmitSmResp> resp, DataTable dtSMS, DateTime sendTime)
        {
            for (int i = 0; i < resp.Count; i++)
            {
                obU.AddInMsgSubmittedNew(resp[i], dtSMS, sendTime);
            }
        }

        public void InsertInMsgSubmitted(string[] strResp, DataTable dtSMS, DateTime sendTime)
        {
            int i = 0;
            for (int w = dtSMS.Rows.Count - 1; w >= 0; w--)
            {
                //for (int i = 0; i < dtSMS.Rows.Count; i++)
                obU.AddInMsgSubmitted(strResp[i], dtSMS.Rows[w], sendTime);
                i++;
            }
        }

        public void AddInMsgStopped(DataTable dtSMS)
        {
            for (int i = 0; i < dtSMS.Rows.Count; i++)
                obU.AddInMsgStopped(dtSMS.Rows[i]);
        }

        public void AddInMsgTEST(DataTable dtSMS)
        {
            for (int i = 0; i < dtSMS.Rows.Count; i++)
                obU.AddInMsgTEST(dtSMS.Rows[i]);
        }

        public void Initialize_Client()
        {
            //Get SMPP Account with Sessions from Database
            dt = obU.GetSMPPAccounts();

            //Get DLRCallBackCustomers
            Util.dtDLRCallBackCust = obU.GetDLRCallBackCustomers();

            // rabi for block template 05/07/2022
            dtDltEr = new DataTable();
            dtDltEr = database.GetDataTable("select senderid, TemplateID, peid,errorcode from errorlog with (nolock)");

            Util.tblerror = database.GetDataTable("select * from errorcodeTemplate with (nolock)");

            clsCheck.mysequence = Convert.ToUInt32(DateTime.Now.ToString("ddHHmmss", System.Globalization.CultureInfo.InvariantCulture));
            if (dt.Rows.Count > 0)
            {
                _client = new SmppClient[dt.Rows.Count];
                _messageComposer = new MessageComposer[dt.Rows.Count];
                worker = new BackgroundWorker[dt.Rows.Count];

                m_IsConnected = new bool[dt.Rows.Count];
                m_ConnectedSucceed = new bool[dt.Rows.Count];
                m_ConnectionInProcess = new bool[dt.Rows.Count];
                timerPROCESS = new System.Timers.Timer[dt.Rows.Count];

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    clsCheck.prodDt[i] = DateTime.Now;
                    worker[i] = new BackgroundWorker();
                    worker[i].DoWork += new DoWorkEventHandler(worker_DoWork);
                    worker[i].ProgressChanged += new ProgressChangedEventHandler(worker_ProgressChanged);
                    worker[i].RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);

                    _client[i] = new SmppClient();
                    _client[i].ResponseTimeout = TimeSpan.FromSeconds(60);
                    _client[i].EnquireLinkInterval = TimeSpan.FromSeconds(10);
                    _client[i].ConnectionRecovery = true;
                    _client[i].EncodingMapper.AddressEncoding = Encoding.ASCII;

                    _client[i].evDisconnected += new DisconnectedEventHandler(client_evDisconnected);
                    _client[i].evDeliverSm += new DeliverSmEventHandler(client_evDeliverSm);
                    _client[i].evEnquireLink += new EnquireLinkEventHandler(client_evEnquireLink);
                    _client[i].evUnBind += new UnBindEventHandler(client_evUnBind);
                    _client[i].evDataSm += new DataSmEventHandler(client_evDataSm);
                    _client[i].evRecoverySucceeded += ClientOnRecoverySucceeded;

                    _client[i].evServerCertificateValidation += OnCertificateValidation;

                    _messageComposer[i] = new MessageComposer();
                    _messageComposer[i].evFullMessageReceived += OnFullMessageReceived;
                    _messageComposer[i].evFullMessageTimeout += OnFullMessageTimeout;

                    DataRow dr = dt.Rows[i];
                    _client[i].Name = Convert.ToString(dr["SMPPACCOUNTID"]);

                    worker[i].RunWorkerAsync(i + "$" + "CONNECT" + "$" +     // 0, 1
                        Convert.ToString(dr["SMPPACCOUNTID"]) + "$" +   //2
                        Convert.ToString(dr["PROVIDER"]) + "$" +        //3
                        Convert.ToString(dr["ACCOUNTTYPE"]) + "$" +     //4
                        Convert.ToString(dr["HOSTNAME"]) + "$" +        //5
                        Convert.ToString(dr["PORT"]) + "$" +            //6
                        Convert.ToString(dr["USESSL"]) + "$" +          //7
                        Convert.ToString(dr["SYSTEMID"]) + "$" +        //8
                        Convert.ToString(dr["PASSWORD"]) + "$" +        //9
                        Convert.ToString(dr["BINDINGMODE"]) + "$" +     //10
                        Convert.ToString(dr["SYSTEMTYPE"]) + "$" +      //11
                        Convert.ToString(dr["ADDRESS_TON"]) + "$" +     //12
                        Convert.ToString(dr["ADDRESS_NPI"]) + "$" +     //13
                        Convert.ToString(dr["SOURCE_ADDRESS"]) + "$" +  //14
                        Convert.ToString(dr["TON_S"]) + "$" +           //15
                        Convert.ToString(dr["NPI_S"]) + "$" +           //16
                        Convert.ToString(dr["SERVICE"]) + "$" +         //17
                        Convert.ToString(dr["DESTNATION_ADDRESS"]) + "$" + //18
                        Convert.ToString(dr["TON_D"]) + "$" +           //19
                        Convert.ToString(dr["NPI_D"]) + "$" +           //20
                        Convert.ToString(dr["DATACODING"]) + "$" +      //21
                        Convert.ToString(dr["MODE"])                    //22
                        );

                    //for showing connection on DATA GRID VIEW on the form.
                    DataGridViewRow dr2 = (DataGridViewRow)grid.Rows[0].Clone();
                    dr2.Cells[0].Value = (i + 1).ToString();
                    dr2.Cells[1].Value = Convert.ToString(dr["PROVIDER"]) + " - " + Convert.ToString(dr["SMPPACCOUNTID"]);
                    dr2.Cells[2].Value = Convert.ToString(dr["SYSTEMID"]) + " - " + Convert.ToString(dr["HOSTNAME"]) + " - " + Convert.ToString(dr["PORT"]) + " - " + Convert.ToString(dr["BINDINGMODE"]);
                    dr2.Cells[3].Value = "Disconnected";
                    grid.Rows.Insert(0, dr2);

                    //wait for 5 seconds after each connection
                    System.Threading.Thread.Sleep(2000);

                    //create dynamic timer for each session. 
                    timerPROCESS[i] = new System.Timers.Timer();
                    timerPROCESS[i].Interval = Convert.ToInt32(ConfigurationManager.AppSettings["PROCESS_INTERVAL"]) + i;
                    timerPROCESS[i].Elapsed += new System.Timers.ElapsedEventHandler(this.timerPROCESS_Tick);
                    timerPROCESS[i].Enabled = true;
                }
            }
        }

        private void timerPROCESS_Tick(object sender, ElapsedEventArgs e)
        {
            //try
            //{
            //testing

            System.Timers.Timer t = (System.Timers.Timer)sender;
            string s = Convert.ToString(Convert.ToInt32(t.Interval));
            int i = Convert.ToInt16(s.Substring(s.Length - 2, 2));
            //obU.InfoTest("Timer start for " + i.ToString());
            if (clsCheck.inprocess[i])
            {
                //obU.InfoTest("returned as inprocess true for " + i.ToString());
                return;
            }
            //_log.Info2("T st -" + i.ToString());
            //obU.InfoTest("frm timer process start for " + i.ToString());
            ProcessSMSsending(i);
            //obU.InfoTest("frm timer process end for " + i.ToString());
            //}
            //catch (Exception ex)
            //{
            //    _log.Info("PROCESSTimer_" + ex.Message + " - " + ex.StackTrace);
            //}
        }

        private string[] GetArg(int i)
        {
            DataRow dr = dt.Rows[i];
            string s = i.ToString() + "$" + "CONNECT" + "$" +     // 0, 1
                Convert.ToString(dr["SMPPACCOUNTID"]) + "$" +   //2
                Convert.ToString(dr["PROVIDER"]) + "$" +        //3
                Convert.ToString(dr["ACCOUNTTYPE"]) + "$" +     //4
                Convert.ToString(dr["HOSTNAME"]) + "$" +        //5
                Convert.ToString(dr["PORT"]) + "$" +            //6
                Convert.ToString(dr["USESSL"]) + "$" +          //7
                Convert.ToString(dr["SYSTEMID"]) + "$" +        //8
                Convert.ToString(dr["PASSWORD"]) + "$" +        //9
                Convert.ToString(dr["BINDINGMODE"]) + "$" +     //10
                Convert.ToString(dr["SYSTEMTYPE"]) + "$" +      //11
                Convert.ToString(dr["ADDRESS_TON"]) + "$" +     //12
                Convert.ToString(dr["ADDRESS_NPI"]) + "$" +     //13
                Convert.ToString(dr["SOURCE_ADDRESS"]) + "$" +  //14
                Convert.ToString(dr["TON_S"]) + "$" +           //15
                Convert.ToString(dr["NPI_S"]) + "$" +           //16
                Convert.ToString(dr["SERVICE"]) + "$" +         //17
                Convert.ToString(dr["DESTNATION_ADDRESS"]) + "$" + //18
                Convert.ToString(dr["TON_D"]) + "$" +           //19
                Convert.ToString(dr["NPI_D"]) + "$" +           //20
                Convert.ToString(dr["DATACODING"]) + "$" +      //21
                Convert.ToString(dr["MODE"]);
            string[] arg = s.Split('$');
            return arg;
        }

        private void OnCertificateValidation(object sender, CertificateValidationEventArgs args)
        {
            //accept all certificates
            args.Accepted = true;
        }

        private async void worker_DoWork(object sender, DoWorkEventArgs workEventArgs)
        {
            string[] arg = Convert.ToString(workEventArgs.Argument).Split('$');
            int i = Convert.ToInt16(arg[0]);
            if (arg[1] == "CONNECT")
            {
                await Connect(arg);
            }
        }

        private void worker_ProgressChanged(object sender, ProgressChangedEventArgs progressEventArgs)
        {
        }

        private void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs connectEventArgs)
        {

        }

        private async Task ConnectTEST(string[] arg)
        {
            int i = Convert.ToInt16(arg[0]);
            for (int m = 0; m < grid.Rows.Count; m++)
                if (Convert.ToInt16(grid.Rows[m].Cells[0].Value) == Convert.ToInt16(i + 1))
                    grid.Rows[m].Cells[3].Value = "NOT Connected";
            await Task.Delay(200);
        }

        private async Task Connect(string[] arg)
        {
            try
            {
                int i = Convert.ToInt16(arg[0]);

                if (_client[i].Status == ConnectionStatus.Closed)
                {
                    _log.Info("Connecting to " + arg[5] + " . " + arg[2]);

                    //bConnect.Enabled = false;
                    //bDisconnect.Enabled = false;
                    //cbReconnect.Enabled = false;

                    //_client[i].EsmeAddress = new SmeAddress("", (AddressTON)Convert.ToByte(tbAddrTon.Text), (AddressNPI)Convert.ToByte(tbAddrNpi.Text));
                    _client[i].EsmeAddress = new SmeAddress("", (AddressTON)Convert.ToByte(arg[12]), (AddressNPI)Convert.ToByte(arg[13]));
                    _client[i].SystemType = arg[11]; // tbSystemType.Text;

                    _client[i].ConnectionRecovery = true; // cbReconnect.Checked;
                    _client[i].ConnectionRecoveryDelay = TimeSpan.FromSeconds(3);


                    if (arg[7] == "1" || arg[7].ToUpper() == "TRUE") // cbSSL.Checked)
                    {
                        _client[i].EnabledSslProtocols = SslProtocols.Default;
                        _client[i].ClientCertificates.Clear();
                        _client[i].ClientCertificates.Add(new X509Certificate2("client.p12", "12345"));
                    }
                    else
                    {
                        _client[i].EnabledSslProtocols = SslProtocols.None;
                    }
                    _log.Info("Connecting start to " + arg[5] + " Port no " + Convert.ToString(arg[6]) + " . id-" + arg[2]);
                    bool bSuccess = await _client[i].ConnectAsync(arg[5], Convert.ToInt32(arg[6]));
                    if (bSuccess)
                    {
                        _log.Info("SmppClient connected " + arg[8] + " . " + arg[2]);

                        await Bind(arg);
                        for (int m = 0; m < grid.Rows.Count; m++)
                            if (Convert.ToInt16(grid.Rows[m].Cells[0].Value) == Convert.ToInt16(i + 1))
                                grid.Rows[m].Cells[3].Value = "Connected";
                    }
                    else
                    {
                        _log.Info("Not Connected .. " + arg[8]);
                        for (int m = 0; m < grid.Rows.Count; m++)
                            if (Convert.ToInt16(grid.Rows[m].Cells[0].Value) == Convert.ToInt16(i + 1))
                                grid.Rows[m].Cells[3].Value = "DisConnected";
                        //bConnect.Enabled = true;
                        //cbReconnect.Enabled = true;
                        //bDisconnect.Enabled = false;
                    }
                }
            }
            catch (Exception ex)
            {
                _log.Info("err on connect " + arg[5] + ". " + ex.Message + ". - " + ex.StackTrace);
            }
        }

        private async Task Bind(string[] arg)
        {
            _log.Info("Bind client with SystemId: " + arg[8]);
            int i = Convert.ToInt16(arg[0]);
            ConnectionMode mode = ConnectionMode.Transceiver;


            //bDisconnect.Enabled = true;
            //mode =  (ConnectionMode)cbBindingMode.SelectedItem;
            object o = arg[10];
            if (arg[10].ToUpper() == "TRANSCEIVER") mode = ConnectionMode.Transceiver;
            if (arg[10].ToUpper() == "RECEIVER") mode = ConnectionMode.Receiver;
            if (arg[10].ToUpper() == "TRANSMITER") mode = ConnectionMode.Transmitter;

            BindResp resp = await _client[i].BindAsync(arg[8], arg[9], mode);

            switch (resp.Header.Status)
            {
                case CommandStatus.ESME_ROK:
                    _log.Info("Bind succeeded: Status: " + resp.Header.Status + ", SystemId: " + resp.SystemId + " - " + arg[2]);
                    //bSubmit.Enabled = true;
                    break;
                default:
                    _log.Info("Bind failed: Status: " + resp.Header.Status + ", SystemId: " + resp.SystemId + " - " + arg[2]);
                    //await Disconnect(arg);
                    break;
            }
        }

        private async Task Disconnect(string[] arg)
        {
            int i = Convert.ToInt16(arg[0]);
            _log.Info("Disconnect started from SMPP server " + arg[5] + " acc-" + arg[2]);

            if (_client[i].Status == ConnectionStatus.Bound)
            {
                await UnBind(arg);
                _log.Info("unbind completed from SMPP server " + arg[5] + " acc-" + arg[2]);
            }

            if (_client[i].Status == ConnectionStatus.Open)
            {
                await _client[i].DisconnectAsync();
                _log.Info("Disconnection completed from SMPP server " + arg[5] + " acc-" + arg[2]);
            }
        }

        private async void client_evDisconnected(object sender)
        {
            SmppClient client = (SmppClient)sender;
            string s = client.SystemID;
            string n = client.Name;
            _log.Info("SmppClient disconnected " + n + " - " + s);
            int i = -1;
            for (int j = 0; j < dt.Rows.Count; j++)
            {
                if (dt.Rows[j]["SYSTEMID"].ToString() == s && client.Name == Convert.ToString(dt.Rows[j]["SMPPACCOUNTID"]))
                { i = j; break; }
            }
            if (i >= 0)
            {
                DataRow[] dr = dt.Select("SYSTEMID = '" + s + "' AND SMPPACCOUNTID='" + client.Name + "'");
                string[] arg = (
                i.ToString() + "$" + "CONNECT" +      // 0, 1
                        Convert.ToString(dr[0]["SMPPACCOUNTID"]) + "$" +   //2
                        Convert.ToString(dr[0]["PROVIDER"]) + "$" +        //3
                        Convert.ToString(dr[0]["ACCOUNTTYPE"]) + "$" +     //4
                        Convert.ToString(dr[0]["HOSTNAME"]) + "$" +        //5
                        Convert.ToString(dr[0]["PORT"]) + "$" +            //6
                        Convert.ToString(dr[0]["USESSL"]) + "$" +          //7
                        Convert.ToString(dr[0]["SYSTEMID"]) + "$" +        //8
                        Convert.ToString(dr[0]["PASSWORD"]) + "$" +        //9
                        Convert.ToString(dr[0]["BINDINGMODE"]) + "$" +     //10
                        Convert.ToString(dr[0]["SYSTEMTYPE"]) + "$" +      //11
                        Convert.ToString(dr[0]["ADDRESS_TON"]) + "$" +     //12
                        Convert.ToString(dr[0]["ADDRESS_NPI"]) + "$" +     //13
                        Convert.ToString(dr[0]["SOURCE_ADDRESS"]) + "$" +  //14
                        Convert.ToString(dr[0]["TON_S"]) + "$" +           //15
                        Convert.ToString(dr[0]["NPI_S"]) + "$" +           //16
                        Convert.ToString(dr[0]["SERVICE"]) + "$" +         //17
                        Convert.ToString(dr[0]["DESTNATION_ADDRESS"]) + "$" + //18
                        Convert.ToString(dr[0]["TON_D"]) + "$" +           //19
                        Convert.ToString(dr[0]["NPI_D"]) + "$" +           //20
                        Convert.ToString(dr[0]["DATACODING"]) + "$" +      //21
                        Convert.ToString(dr[0]["MODE"])).Split('$');
                
                //COMMENTED ON 06102023 DILIP 
                //await Disconnect(arg);

                for (int m = 0; m < grid.Rows.Count; m++)
                    if (Convert.ToInt16(grid.Rows[m].Cells[0].Value) == Convert.ToInt16(i + 1))
                        grid.Rows[m].Cells[3].Value = "DisConnected";

                //await Connect(arg);
            }


            //Sync(this, () =>
            //{
            //    bConnect.Enabled = true;
            //    bDisconnect.Enabled = false;
            //    bSubmit.Enabled = false;
            //    cbReconnect.Enabled = true;
            //});

        }

        private void ClientOnRecoverySucceeded(object sender, BindResp data)
        {
            try
            {
                SmppClient client = (SmppClient)sender;
                string s = client.SystemID;
                string n = client.Name;
                _log.Info("Connection has been recovered. " + n + " - " + s);
            }
            catch (Exception ex) { }
            //Sync(this, () =>
            //{
            //    bConnect.Enabled = false;
            //    bDisconnect.Enabled = true;
            //    bSubmit.Enabled = true;
            //    cbReconnect.Enabled = false;
            //});
        }

        private async Task UnBind(string[] arg)
        {
            int i = Convert.ToInt16(arg[0]);
            _log.Info("Status - " + _client[i].Status.ToString() + ".  SmppClient " + arg[5]);
            UnBindResp resp = await _client[i].UnbindAsync();

            switch (resp.Header.Status)
            {
                case CommandStatus.ESME_ROK:
                    _log.Info("UnBind succeeded: Status: " + resp.Header.Status);
                    break;
                default:
                    _log.Info("UnBind failed: Status: " + resp.Header.Status);
                    //await _client[i].DisconnectAsync();
                    break;
            }
        }

        private void client_evDeliverSm(object sender, DeliverSm data)
        {
            try
            {
                //Check if we received Delivery Receipt
                if (data.MessageType == MessageTypes.SMSCDeliveryReceipt)
                {
                    //Get MessageId of delivered message
                    string messageId = data.Receipt.MessageId;
                    DateTime donedate = data.Receipt.DoneDate;
                    string deliveryStatus = Convert.ToString(data.Receipt.State);
                    string destno = Convert.ToString(data.SourceAddress.Address);
                    string sid = Convert.ToString(data.DestinationAddress.Address);
                    string errcd = Convert.ToString(data.Receipt.ErrorCode);
                    string param1_Tag;
                    string param1_val;
                    string MCCMNC = "";
                    if (data.Parameters.Count > 0)
                        for (int q = 0; q < data.Parameters.Count; q++)
                        {
                            param1_Tag = "";
                            param1_val = "";
                            param1_Tag = Convert.ToString(data.Parameters[q].TagValue);
                            param1_val = Encoding.UTF8.GetString(data.Parameters[q].Value, 0, data.Parameters[q].Value.Length);
                            if (param1_Tag == "5142") { MCCMNC = param1_val; break; }
                        }
                    Util ob = new Util();
                    System.Threading.Thread t = new System.Threading.Thread(() =>
                    {
                        ob.UpdateDelivery(messageId, donedate, deliveryStatus, data.Receipt.ToString(), errcd, MCCMNC, sid, destno, dlrCallBack);
                    });
                    t.Start();


                    //_log.Info("Dlr: " + data.Receipt.ToString());

                }
                else
                {
                    #region < Commented
                    /*
                    // Receive incoming message and try to concatenate all parts
                    if (data.Concatenation != null)
                    {
                        _messageComposer.AddMessage(data);

                        _log.Info("DeliverSm part received: Sequence: {0}, SourceAddress: {1}, Concatenation ( {2} )" +
                                " Coding: {3}, Text: {4}",
                                data.Header.Sequence, data.SourceAddress, data.Concatenation, data.DataCoding, _client.EncodingMapper.GetMessageText(data));
                    }
                    else
                    {
                        _log.Info("DeliverSm received : Sequence: {0}, SourceAddress: {1}, Coding: {2}, Text: {3}",
                            data.Header.Sequence, data.SourceAddress, data.DataCoding, _client.EncodingMapper.GetMessageText(data));
                    }

                    // Check if an ESME acknowledgement is required
                    if (data.Acknowledgement != SMEAcknowledgement.NotRequested)
                    {
                        // You have to clarify with SMSC support what kind of information they request in ESME acknowledgement.

                        string messageText = data.GetMessageText(_client.EncodingMapper);

                        var smBuilder = SMS.ForSubmit()
                            .From(data.DestinationAddress)
                            .To(data.SourceAddress)
                            .Coding(data.DataCoding)
                            .Concatenation(ConcatenationType.UDH8bit, _client.SequenceGenerator.NextReferenceNumber())
                            .Set(m => m.MessageType = MessageTypes.SMEDeliveryAcknowledgement)
                            .Text(new Receipt
                            {
                                DoneDate = DateTime.Now,
                                State = MessageState.Delivered,
                                //  MessageId = data.Response.MessageId,
                                ErrorCode = "0",
                                SubmitDate = DateTime.Now,
                                Text = messageText.Substring(0, Math.Min(20, messageText.Length))
                            }.ToString()
                            );



                        _client.SubmitAsync(smBuilder).ConfigureAwait(false);
                    }
                    */
                    #endregion
                }
            }
            catch (Exception ex)
            {
                Util ob = new Util();
                data.Response.Header.Status = CommandStatus.ESME_RX_T_APPN;
                ob.LogDlvError("Failed to process DeliverSm. " + ex.Message + " - " + ex.StackTrace);
            }
        }

        private void client_evDataSm(object sender, DataSm data)
        {
            //_log.Info("DataSm received : Sequence: {0}, SourceAddress: {1}, DestAddress: {2}, Coding: {3}, Text: {4}", data.Header.Sequence, data.SourceAddress, data.DestinationAddress, data.DataCoding, data.GetMessageText(_client.EncodingMapper));
        }

        private void OnFullMessageTimeout(object sender, MessageEventHandlerArgs args)
        {
            _log.Info("Incomplete message received From: " + args.GetFirst<DeliverSm>().SourceAddress + ", Text: " + args.Text);
        }

        private void OnFullMessageReceived(object sender, MessageEventHandlerArgs args)
        {
            _log.Info("Full message received From: " + args.GetFirst<DeliverSm>().SourceAddress + ", To: " + args.GetFirst<DeliverSm>().DestinationAddress + ", Text: " + args.Text);
        }

        private void client_evEnquireLink(object sender, EnquireLink data)
        {
            try
            {
                SmppClient client = (SmppClient)sender;
                string s = client.SystemID;
                string n = client.Name;
                _log.Info("EnquireLink. " + n + " - " + s);
            }
            catch (Exception ex) { }
        }

        private void client_evUnBind(object sender, UnBind data)
        {
            try
            {
                SmppClient client = (SmppClient)sender;
                string s = client.SystemID;
                string n = client.Name;
                _log.Info("UnBind request received. " + n + " - " + s);
            }
            catch (Exception ex) { }
        }

        public delegate void SyncAction();

        public static void Sync(Control control, SyncAction action)
        {
            if (control.InvokeRequired)
            {
                control.Invoke(action, new object[] { });
                return;
            }
            action();
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            //try
            //{
            //    if (clsCheck.inProcess) return;
            //    ProcessSMSsending();
            //}
            //catch (Exception ex)
            //{
            //    _log.Info("PROCESSTimer_" + ex.Message + " - " + ex.StackTrace);
            //}
        }

        private void btnStatus_Click(object sender, EventArgs e)
        {
            DataRow[] dr = dt.Select("smppaccountid='" + txtSessionID.Text.Trim() + "'");
            if (dr.Length > 0)
            {
                int z = Convert.ToInt16(dr[0]["rownum"]) - 1;
                if (_client[z].Status != ConnectionStatus.Bound)
                {
                    MessageBox.Show("Not Bound " + _client[z].SystemID.ToString() + " and clsCheck is " + Convert.ToString(clsCheck.inprocess[z]));
                }
                else
                {
                    MessageBox.Show("Bound " + _client[z].SystemID.ToString() + " and clsCheck is " + Convert.ToString(clsCheck.inprocess[z]));
                }
            }
            else
            {
                MessageBox.Show("Invalid Session id");
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {

        }

        private async void button1_Click(object sender, EventArgs e)
        {

            DataRow[] dr = dt.Select("smppaccountid='" + txtSessionID.Text.Trim() + "'");
            if (dr.Length > 0)
            {
                int z = Convert.ToInt16(dr[0]["rownum"]) - 1;
                string tranTableName = Convert.ToString(dr[0]["TRANTABLENAME"]);
                try
                {
                    if (_client[z].Status == ConnectionStatus.Bound)
                    {
                        UnBindResp resp = await _client[z].UnbindAsync();
                        System.Threading.Thread.Sleep(5000);
                        MessageBox.Show("Unbind Status : " + Convert.ToString(resp.Header.Status));
                    }
                    else
                    {
                        MessageBox.Show("Unbind Status : already unbound");
                    }
                    if (_client[z].Status == ConnectionStatus.Open)
                    {
                        await _client[z].DisconnectAsync();

                        MessageBox.Show("Disconnected.");
                    }
                    else
                    {
                        MessageBox.Show(" Already Disconnected.");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(" Unbind and Disconnect - " + ex.Message);
                }

                try
                {
                    Int64 cn = Convert.ToInt64(database.GetScalarValue("Select count(*) from " + tranTableName + " where smppaccountid = '" + dr[0]["SMPPACCOUNTID"].ToString() + "'"));
                    if (cn > 0)
                    {
                        string sql = "DELETE FROM " + tranTableName + " WHERE CONVERT(VARCHAR, SMPPACCOUNTID) + CONVERT(VARCHAR, TOMOBILE) + CONVERT(VARCHAR, FILEID) IN" +
                                " (SELECT CONVERT(VARCHAR, SMPPACCOUNTID) + CONVERT(VARCHAR, TOMOBILE) + CONVERT(VARCHAR, FILEID) FROM MSGSUBMITTED with (nolock)" +
                                " where convert(varchar,SENTDATETIME,102)=convert(varchar,getdate(),102) and smppaccountid='" + dr[0]["SMPPACCOUNTID"].ToString() + "') ; " +
                                " Update " + tranTableName + " set picked_datetime = null WHERE smppaccountid='" + dr[0]["SMPPACCOUNTID"].ToString() + "' ; ";
                        database.ExecuteNonQuery(sql);
                    }
                    if (_client[z].Status != ConnectionStatus.Open)
                    {
                        _client[z].EsmeAddress = new SmeAddress("", (AddressTON)Convert.ToByte(Convert.ToString(dr[0]["ADDRESS_TON"])), (AddressNPI)Convert.ToByte(Convert.ToString(dr[0]["ADDRESS_NPI"])));
                        _client[z].SystemType = Convert.ToString(dr[0]["SYSTEMTYPE"]); // tbSystemType.Text;

                        _client[z].ConnectionRecovery = true; // cbReconnect.Checked;
                        _client[z].ConnectionRecoveryDelay = TimeSpan.FromSeconds(3);
                        _client[z].EnabledSslProtocols = SslProtocols.None;
                        MessageBox.Show(" Connecting - " + Convert.ToString(dr[0]["HOSTNAME"]) + " - " + dr[0]["SMPPACCOUNTID"].ToString());

                        var task = _client[z].ConnectAsync(Convert.ToString(dr[0]["HOSTNAME"]), Convert.ToInt32(Convert.ToString(dr[0]["PORT"])));
                        var res = await Task.WhenAny(task, Task.Delay(5000));

                        if (res == task)
                        {
                            bool bSuccess = task.GetAwaiter().GetResult();
                            // Populate my result object with the necessary values


                            if (bSuccess)
                            {
                                MessageBox.Show("SmppClient connected " + _client[z].SystemID.ToString());

                                ConnectionMode mode = ConnectionMode.Transceiver;
                                //object o = arg[10];
                                if (Convert.ToString(dr[0]["BINDINGMODE"]).ToUpper() == "TRANSCEIVER") mode = ConnectionMode.Transceiver;
                                if (Convert.ToString(dr[0]["BINDINGMODE"]).ToUpper() == "RECEIVER") mode = ConnectionMode.Receiver;
                                if (Convert.ToString(dr[0]["BINDINGMODE"]).ToUpper() == "TRANSMITER") mode = ConnectionMode.Transmitter;

                                var task1 = _client[z].BindAsync(Convert.ToString(dr[0]["SYSTEMID"]), Convert.ToString(dr[0]["PASSWORD"]), mode);
                                var res1 = await Task.WhenAny(task1, Task.Delay(5000));
                                if (res1 == task1)
                                {
                                    BindResp resp = task1.GetAwaiter().GetResult();

                                    switch (resp.Header.Status)
                                    {
                                        case CommandStatus.ESME_ROK:
                                            MessageBox.Show("Bind succeeded: Status: " + resp.Header.Status + ", SystemId: " + resp.SystemId);
                                            break;
                                        default:
                                            MessageBox.Show("Bind failed: Status: " + resp.Header.Status);
                                            await _client[z].DisconnectAsync();
                                            MessageBox.Show("dISCONNECTED:");
                                            break;
                                    }

                                    for (int m = 0; m < grid.Rows.Count; m++)
                                        if (Convert.ToInt16(grid.Rows[m].Cells[0].Value) == Convert.ToInt16(z + 1))
                                            grid.Rows[m].Cells[3].Value = "Connected";
                                }
                            }
                            else
                            {
                                MessageBox.Show("Not Connected .. " + _client[z].SystemID.ToString());
                                for (int m = 0; m < grid.Rows.Count; m++)
                                    if (Convert.ToInt16(grid.Rows[m].Cells[0].Value) == Convert.ToInt16(z + 1))
                                        grid.Rows[m].Cells[3].Value = "DisConnected";
                            }
                        }
                    }
                    clsCheck.inprocess[z] = false;
                    MessageBox.Show(" Done. ");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(" 2  - " + ex.Message);
                }
            }
            else
            {
                MessageBox.Show("Invalid Session id");
            }
        }

        private void grid_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            System.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();
            messageBoxCS.AppendFormat("{0} = {1}", "CloseReason", e.CloseReason);
            messageBoxCS.AppendLine();
            Util ob = new Util();
            ob.LogEXEClose(messageBoxCS.ToString());
        }

        #region << Auto Binding UnBind Session Add By Vikas On 10-08-2023 >>
        private void timerAutoBindingUnBindSession_Tick(object sender, ElapsedEventArgs e)
        {
            try
            {
                if (boolIsAutoBindingUnBindSessionProcess) return;
                boolIsAutoBindingUnBindSessionProcess = true;
                ProcessAutoBindingUnBindSession();
                boolIsAutoBindingUnBindSessionProcess = false;
            }
            catch (Exception ex)
            {
                boolIsAutoBindingUnBindSessionProcess = false;
                _log.Info_Err2("ProcessAutoBindingUnBindSession" + ex.StackTrace + " - " + ex.Message, 9999);
            }
        }

        public async Task ProcessAutoBindingUnBindSession()
        {
            try
            {
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        int acId1 = Convert.ToInt16(dt.Rows[i]["SMPPACCOUNTID"]);
                        if (_client[i].Status != ConnectionStatus.Bound)
                        {

                            if (_client[i].Status == ConnectionStatus.Closed)
                            {
                                _log.Info("frm ProcessAutoBindingUnBindSession for " + acId1.ToString() + " client status not CONNECTED");
                                string[] arg = GetArg(i);
                                _log.Info("frm ProcessAutoBindingUnBindSession for " + acId1.ToString() + " client connect start");
                                await Connect(arg);
                                _log.Info("frm ProcessAutoBindingUnBindSession for " + acId1.ToString() + " client connect ended");
                            }
                            else
                            {
                                _log.Info("frm ProcessAutoBindingUnBindSession for " + acId1.ToString() + " client status NOT BOUND");
                                string[] arg = GetArg(i);
                                _log.Info("frm ProcessAutoBindingUnBindSession for " + acId1.ToString() + " client BINDING start");
                                await Bind(arg);
                                _log.Info("frm ProcessAutoBindingUnBindSession for " + acId1.ToString() + " client BINDING ended");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                boolIsAutoBindingUnBindSessionProcess = false;
                _log.Info_Excepn("ProcessAutoBindingUnBindSession" + ex.StackTrace + " - " + ex.Message, 9999);
                //throw ex;
            }
        }
        #endregion
    }
}